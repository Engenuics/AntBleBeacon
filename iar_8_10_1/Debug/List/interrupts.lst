###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       29/Jun/2018  00:30:10
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\EiE\EiE Git\AntBleBeacon\bsp\interrupts.c
#    Command line =  
#        -f C:\Users\ENGENU~1\AppData\Local\Temp\EW5B97.tmp ("D:\EiE\EiE
#        Git\AntBleBeacon\bsp\interrupts.c" -D NRF51 -lC "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\Debug\List" -o "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR
#        Systems\EWARM_8_10_1\arm\INC\c\DLib_Config_Normal.h" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\bsp\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\application\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\s310\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\ble_services\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\device_manager\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\app_common\"
#        -On --require_prototypes -I "C:\Program Files\IAR
#        Systems\EWARM_8_10_1\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        D:\EiE\EiE Git\AntBleBeacon\iar_8_10_1\Debug\List\interrupts.lst
#    Object file  =  
#        D:\EiE\EiE Git\AntBleBeacon\iar_8_10_1\Debug\Obj\interrupts.o
#
###############################################################################

D:\EiE\EiE Git\AntBleBeacon\bsp\interrupts.c
      1          /**********************************************************************************************************************
      2          File: interrupts.c                                                                
      3          
      4          Description:
      5          This is a interrupts .c file new source code.
      6          System-level interrupt handlers are defined here.  Driver-specific handlers will be found in
      7          their respective source files.
      8          
      9          All SoC interrupts are in soc_integration.c
     10          
     11          This might be too fragmented, so we reserve the right to change it up after we play with it for a while.
     12          
     13          **********************************************************************************************************************/
     14          
     15          #include "configuration.h"

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                  ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                                    ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                                                      ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

  void LedOn(LedNumberType eLED_);
             ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",76  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedOff(LedNumberType eLED_);
              ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",77  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedToggle(LedNumberType eLED_);
                 ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",78  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedPWM(LedNumberType eLED_, LedRateType ePwmRate_);
              ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",79  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedBlink(LedNumberType eLED_, LedRateType ePwmRate_);
                ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",80  Error[Pe020]: identifier
          "LedNumberType" is undefined
     16          
     17          /***********************************************************************************************************************
     18          Global variable definitions with scope across entire project.
     19          All Global variable names shall start with "G_"
     20          ***********************************************************************************************************************/
     21          /* New variables */
     22          volatile u32 G_u32InterruptsFlags;                     /* Global state flags */
     23          
     24          
     25          /*--------------------------------------------------------------------------------------------------------------------*/
     26          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     27          extern volatile u32 G_u32SystemTime1ms;                /*!< @brief From main.c */
     28          extern volatile u32 G_u32SystemTime1s;                 /*!< @brief From main.c */
     29          extern volatile u32 G_u32SystemFlags;                  /*!< @brief From main.c */
     30          
     31          extern volatile bool G_abButtonDebounceActive[TOTAL_BUTTONS];
                                                               ^
Error[Pe020]: identifier "TOTAL_BUTTONS" is undefined
     32          extern volatile u32 G_au32ButtonDebounceTimeStart[TOTAL_BUTTONS];
     33          
     34          
     35          /***********************************************************************************************************************
     36          Global variable definitions with scope limited to this local application.
     37          Variable names shall start with "Interrupts_" and be declared as static.
     38          ***********************************************************************************************************************/
     39          //static u32 Interrupts_u32Timeout;                     /* Timeout counter used across states */
     40          
     41          
     42          /**********************************************************************************************************************
     43          Function Definitions
     44          **********************************************************************************************************************/
     45          
     46          /*--------------------------------------------------------------------------------------------------------------------
     47          Function: InterruptsInitialize
     48          
     49          Description:
     50          Initializes the State Machine and its variables.
     51          
     52          Requires:
     53            - None.
     54          
     55          Promises:
     56            - Returns TRUE if SoftDevice Interrupts are successfully enabled, FALSE otherwise.
     57          */
     58          bool InterruptsInitialize(void)
     59          {
     60          #define SD_PRESENT 1
     61            
     62          #ifndef SD_PRESENT  
     63            NVIC_ClearPendingIRQ(RTC1_IRQn);
     64            NVIC_EnableIRQ(RTC1_IRQn);
     65            
     66            NVIC_ClearPendingIRQ(GPIOTE_IRQn);
     67            NVIC_EnableIRQ(GPIOTE_IRQn);
     68          #else
     69            
     70            u32 u32Result = NRF_SUCCESS;
     71            
     72            // Must enable the SoftDevice Interrupt first.
     73            u32Result |= sd_nvic_SetPriority(SD_EVT_IRQn, NRF_APP_PRIORITY_LOW);
     74            u32Result |= sd_nvic_EnableIRQ(SD_EVT_IRQn);
     75            
     76            // Enable the RTC Peripheral.
     77            u32Result |= sd_nvic_SetPriority(RTC1_IRQn, NRF_APP_PRIORITY_LOW);
     78            u32Result |= sd_nvic_EnableIRQ(RTC1_IRQn);
     79          
     80            // Enable the GPIOTE Peripheral.
     81            u32Result |= sd_nvic_SetPriority(GPIOTE_IRQn, NRF_APP_PRIORITY_LOW);
     82            u32Result |= sd_nvic_EnableIRQ(GPIOTE_IRQn);
     83          
     84            return (u32Result == NRF_SUCCESS);
     85          #endif
     86          
     87          } /* end InterruptsInitialize() */
     88          
     89          
     90          /*--------------------------------------------------------------------------------------------------------------------*/
     91          /* Handlers                                                                                                  */
     92          /*--------------------------------------------------------------------------------------------------------------------*/
     93          
     94          void HardFault_Handler(u32 u32ProgramCounter_, u32 u32LinkRegister_)
     95          {
     96            (void)u32ProgramCounter_;
     97            (void)u32LinkRegister_;
     98          
     99             while(1); // loop for debugging
    100          }
    101          
    102          
    103          void TIMER1_IRQHandler(void)
    104          { 
    105            while(1);
    106          }
    107          
    108          void RTC1_IRQHandler(void)
    109          {
    110            // Clear the Tick Event
    111            NRF_RTC1->EVENTS_TICK = 0;
    112            
    113            // Update global counters.
    114            G_u32SystemTime1ms++;
    115            if ((G_u32SystemTime1ms % 1000) == 0)
    116            {
    117              G_u32SystemTime1s++;
    118            }
    119          }
    120          
    121          
    122          /*!----------------------------------------------------------------------------------------------------------------------
    123          @fn ISR void SD_EVT_IRQHandler(void)
    124          
    125          @brief Processes soft device events.
    126          
    127          Requires:
    128            - enabled via sd_nvic_XXX
    129          
    130          Promises:
    131            -  Sets global system flags indicating that BLE and ANT events are pending.
    132               It is possible that either ANT or BLE events OR ANT & BLE events are pending.
    133               The application shall handle all the cases. 
    134            
    135          */
    136          void SD_EVT_IRQHandler(void)
    137          {
    138            /* Set Flag that ANT and BLE Events pending. */
    139            G_u32SystemFlags |= (_SYSTEM_PROTOCOL_EVENT); 
    140            
    141          } /* end SD_EVT_IRQHandler() */
    142          
    143          
    144          /*!----------------------------------------------------------------------------------------------------------------------
    145          @fn ISR void GPIOTE_IRQHandler(void)
    146          
    147          @brief Processes GPIOTE Events such as Pin and Port InterruptsB
    148          
    149          Requires:
    150          - Enabled via sd_nvic_XXX
    151          
    152          Promises:
    153          - Handles the GPIOTE events for the enabled pins. 
    154          
    155          */
    156          void GPIOTE_IRQHandler(void)
    157          {
    158            /* Check for button-related interrupts */
    159            for(u8 i= 0; i < U8_TOTAL_BUTTONS; i++)
    160            {
    161              /* First find a button channel event that is enabled and fired */
    162              if( (G_asBspButtonConfigurations[i].eChannelNumber != GPIOE_NO_CHANNEL) &&
                          ^
Error[Pe020]: identifier "G_asBspButtonConfigurations" is undefined
    163                  (NRF_GPIOTE->EVENTS_IN[G_asBspButtonConfigurations[i].eChannelNumber]) )
    164              {
    165                /* Disable interrupt and clear channel event */
    166                NRF_GPIOTE->INTENCLR = G_asBspButtonConfigurations[i].u32GpioeChannelBit;
    167                NRF_GPIOTE->EVENTS_IN[G_asBspButtonConfigurations[i].eChannelNumber]] = 0;   
                                                                                           ^
Error[Pe065]: expected a ";"
    168          
    169                Button_asStatus[(u8)eButton].bDebounceActive = TRUE;
                       ^
Error[Pe020]: identifier "Button_asStatus" is undefined

        Button_asStatus[(u8)eButton].bDebounceActive = TRUE;
                            ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\interrupts.c",169  Error[Pe020]: identifier
          "eButton" is undefined
    170                Button_asStatus[(u8)eButton].u32DebounceTimeStart = G_u32SystemTime1ms;
    171              }
    172            } /* end for (i) */
    173          
    174          } /* end GPIOTE_IRQHandler() */
    175          
    176          
    177          
    178          
    179          /*--------------------------------------------------------------------------------------------------------------------*/
    180          /* End of File                                                                                                        */
    181          /*--------------------------------------------------------------------------------------------------------------------*/

Errors: 13
Warnings: none
