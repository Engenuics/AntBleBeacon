###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       29/Jun/2018  00:30:10
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\EiE\EiE Git\AntBleBeacon\bsp\ble_integration.c
#    Command line =  
#        -f C:\Users\ENGENU~1\AppData\Local\Temp\EW598F.tmp ("D:\EiE\EiE
#        Git\AntBleBeacon\bsp\ble_integration.c" -D NRF51 -lC "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\Debug\List" -o "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR
#        Systems\EWARM_8_10_1\arm\INC\c\DLib_Config_Normal.h" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\bsp\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\application\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\s310\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\ble_services\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\device_manager\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\app_common\"
#        -On --require_prototypes -I "C:\Program Files\IAR
#        Systems\EWARM_8_10_1\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        D:\EiE\EiE Git\AntBleBeacon\iar_8_10_1\Debug\List\ble_integration.lst
#    Object file  =  
#        D:\EiE\EiE Git\AntBleBeacon\iar_8_10_1\Debug\Obj\ble_integration.o
#
###############################################################################

D:\EiE\EiE Git\AntBleBeacon\bsp\ble_integration.c
      1          /**********************************************************************************************************************
      2          File: ble_integration.c                                                                
      3          
      4          Description:
      5          This is a ble_integration .c file new source code
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                  ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                                    ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                                                      ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

  void LedOn(LedNumberType eLED_);
             ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",76  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedOff(LedNumberType eLED_);
              ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",77  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedToggle(LedNumberType eLED_);
                 ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",78  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedPWM(LedNumberType eLED_, LedRateType ePwmRate_);
              ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",79  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedBlink(LedNumberType eLED_, LedRateType ePwmRate_);
                ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",80  Error[Pe020]: identifier
          "LedNumberType" is undefined
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */
     15          volatile u32 G_u32BLEIntegrationFlags;                 /* Global state flags */
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     21          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     22          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     23          
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope limited to this local application.
     27          Variable names shall start with "SocInt_" and be declared as static.
     28          ***********************************************************************************************************************/
     29          //static u32 bleintegration_u32Timeout;                                            /* Timeout counter used across states */
     30          static u8 au8EventBuffer[100];      // TODO: Determine exact value             /* Single BLE buffer used for incoming BLE messages */
     31          
     32          /*--------------------------------------------------------------------------------------------------------------------*/
     33          /* Private Function Declarations.                                                                                                   */
     34          /*--------------------------------------------------------------------------------------------------------------------*/
     35          static ble_evt_t* BLEIntegration_get_buffer(void);
     36          
     37          /**********************************************************************************************************************
     38          Function Definitions
     39          **********************************************************************************************************************/
     40          /*--------------------------------------------------------------------------------------------------------------------*/
     41          /* Public functions                                                                                                   */
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          
     44          /*--------------------------------------------------------------------------------------------------------------------*/
     45          /* Protected functions                                                                                                */
     46          /*--------------------------------------------------------------------------------------------------------------------*/
     47          bool BLEIntegrationInitialize(void)
     48          {
     49            return true;
     50          }
     51          
     52          /*----------------------------------------------------------------------------------------------------------------------
     53          Function: BLEIntegrationHandler
     54          
     55          Description:
     56          Checks if a BLE buffer is present for processing.
     57          
     58          Requires:
     59            - None
     60          
     61          Promises:
     62            - Dispatches event to the all BLE Handlers
     63          */
     64          void BLEIntegrationHandler(void)
     65          {
     66              // Fetch message.
     67              ble_evt_t* ble_evt = BLEIntegration_get_buffer();
     68                
     69              // Check if message was successfully fetched.
     70              while (ble_evt)
     71              {
     72                // Dispatch to all BLE specific handlers.
     73                bleperipheralEventHandler(ble_evt);
     74                
     75                // Check if another message is pending.
     76                ble_evt = BLEIntegration_get_buffer();
     77              }
     78          }
     79          
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          /* Private functions                                                                                                */
     82          /*--------------------------------------------------------------------------------------------------------------------*/
     83          
     84          /*----------------------------------------------------------------------------------------------------------------------
     85          Function: BLEIntegration_get_buffer
     86          
     87          Description:
     88          Calls the BLE SoftDevice function to check if an appropriate message is available
     89          
     90          Requires:
     91            - None
     92          
     93          Promises:
     94            - Returns NULL if no ble_message is availble.
     95            - Copies the ble_message to au8EventBuffer if message is available and returns pointer to 
     96              the buffer.
     97          */
     98          static ble_evt_t* BLEIntegration_get_buffer(void)
     99          {
    100             u16 u16EventLength = sizeof(au8EventBuffer);
    101             u32 u32ErrorCode;
    102          
    103             u32ErrorCode = sd_ble_evt_get(au8EventBuffer, &u16EventLength);
    104             if (u32ErrorCode == NRF_ERROR_NOT_FOUND)
    105             {
    106                return NULL;
    107             }
    108             else if (u32ErrorCode != NRF_SUCCESS)
    109             {
    110               return NULL;
    111             }
    112             
    113             return (ble_evt_t*) au8EventBuffer;
    114          
    115          }
    116          
    117          
    118          
    119          
    120          
    121          /*--------------------------------------------------------------------------------------------------------------------*/
    122          /* End of File                                                                                                        */
    123          /*--------------------------------------------------------------------------------------------------------------------*/

Errors: 8
Warnings: none
