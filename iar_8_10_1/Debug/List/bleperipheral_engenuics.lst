###############################################################################
#
# IAR ANSI C/C++ Compiler V8.10.1.12857/W32 for ARM       29/Jun/2018  00:30:10
# Copyright 1999-2017 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\EiE\EiE Git\AntBleBeacon\application\bleperipheral_engenuics.c
#    Command line =  
#        -f C:\Users\ENGENU~1\AppData\Local\Temp\EW5A0E.tmp ("D:\EiE\EiE
#        Git\AntBleBeacon\application\bleperipheral_engenuics.c" -D NRF51 -lC
#        "D:\EiE\EiE Git\AntBleBeacon\iar_8_10_1\Debug\List" -o "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\Debug\Obj" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR
#        Systems\EWARM_8_10_1\arm\INC\c\DLib_Config_Normal.h" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\bsp\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\application\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\s310\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\ble_services\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\ble\device_manager\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\..\nordic_sdk6_1_0\Include\app_common\"
#        -On --require_prototypes -I "C:\Program Files\IAR
#        Systems\EWARM_8_10_1\arm\CMSIS\Include\")
#    Locale       =  C
#    List file    =  
#        D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\Debug\List\bleperipheral_engenuics.lst
#    Object file  =  
#        D:\EiE\EiE
#        Git\AntBleBeacon\iar_8_10_1\Debug\Obj\bleperipheral_engenuics.o
#
###############################################################################

D:\EiE\EiE Git\AntBleBeacon\application\bleperipheral_engenuics.c
      1          /**********************************************************************************************************************
      2          File: bleperipheral_engenuics.c                                                                
      3          
      4          Description:
      5          BLE Peripheral Service module for the Engenuics BLE Profile.
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                  ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                                    ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

                GPIOE_TASK0  = 0, GPIOE_TASK0  = 1, GPIOE_TASK0  = 2, GPIOE_TASK0  = 3, 
                                                                      ^
"D:\EiE\EiE Git\AntBleBeacon\application\typedefs.h",65  Error[Pe101]: 
          "GPIOE_TASK0" has already been declared in the current scope (at line
          65)

  void LedOn(LedNumberType eLED_);
             ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",76  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedOff(LedNumberType eLED_);
              ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",77  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedToggle(LedNumberType eLED_);
                 ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",78  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedPWM(LedNumberType eLED_, LedRateType ePwmRate_);
              ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",79  Error[Pe020]: identifier
          "LedNumberType" is undefined

  void LedBlink(LedNumberType eLED_, LedRateType ePwmRate_);
                ^
"D:\EiE\EiE Git\AntBleBeacon\bsp\leds_nrf51.h",80  Error[Pe020]: identifier
          "LedNumberType" is undefined
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */
     15          volatile u32 G_u32BPEngenuicsFlags;                       /* Global state flags */
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemTime1ms;                /*!< @brief From main.c */
     21          extern volatile u32 G_u32SystemTime1s;                 /*!< @brief From main.c */
     22          extern volatile u32 G_u32SystemFlags;                  /*!< @brief From main.c */
     23          
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope limited to this local application.
     27          Variable names shall start with "BPEngenuics_" and be declared as static.
     28          ***********************************************************************************************************************/
     29          //static u32 BPEngenuics_u32Timeout;           /* Timeout counter used across states */
     30          static u8  BPEngenuics_u8UuidType;                       /* UUID Type for BLEEngenuics service */ 
     31          static u16 BPEngenuics_u16ServiceHandle;                 /* Handle for the GATTS Service */
     32          static ble_gatts_char_handles_t BPEngenuics_eTxHandles;  /* TX Characteristic Handles */
     33          static ble_gatts_char_handles_t BPEngenuics_eRxHandles;  /* RX Characteristic Handles */          
     34          static u16 BPEngenuics_u16ConnHandle;                    /* Connection handle indicating if the device is GAP Connected to Client*/
     35          static bool BPEngenuics_bNotifcationEnabled;             /* Flag to indicate if Notifications have been enabled by the Client */
     36          
     37          
     38          /**********************************************************************************************************************
     39          Function Definitions
     40          **********************************************************************************************************************/
     41          
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          /* Public functions                                                                                                   */
     44          /*--------------------------------------------------------------------------------------------------------------------*/
     45          bool BPEngenuicsSendData(u8* buffer, u8 size)
     46          {
     47            ble_gatts_hvx_params_t hvx;   // Indication / Notification structure.
     48          
     49            if (size > BPENGENUICS_MAX_CHAR_LEN)
     50              return false;
     51            
     52            // Check that the module is connected AND notifications are enabled.
     53            if ((BPEngenuics_u16ConnHandle != BLE_CONN_HANDLE_INVALID) && (BPEngenuics_bNotifcationEnabled))
     54            {
     55              memset(&hvx, 0, sizeof(hvx));
     56              hvx.handle = BPEngenuics_eTxHandles.value_handle;
     57              hvx.p_data = buffer;
     58              hvx.p_len = (uint16_t*)&size;
     59              hvx.type = BLE_GATT_HVX_NOTIFICATION;
     60              
     61              return (sd_ble_gatts_hvx(BPEngenuics_u16ConnHandle, &hvx) == NRF_SUCCESS);
     62            }
     63            else
     64            {
     65              return false;
     66            }
     67          }
     68          
     69          /*--------------------------------------------------------------------------------------------------------------------*/
     70          /* Protected functions                                                                                                */
     71          /*--------------------------------------------------------------------------------------------------------------------*/
     72          /*--------------------------------------------------------------------------------------------------------------------
     73          Function: BPEngenuicsInitialize
     74          
     75          Description:
     76          Initializes the State Machine and its variables.
     77          
     78          Requires:
     79             - Called after the stack has been initialized.
     80             - Called from the BLEIntegrationHandlerInitialize
     81          
     82          Promises:
     83            - Characteristics are registered to the Services.
     84            - Service is registered with the stack for operations.
     85          */
     86          bool BPEngenuicsInitialize(void)
     87          {
     88            u32 error;
     89          
     90            // Initialize.
     91            BPEngenuics_u16ConnHandle = BLE_CONN_HANDLE_INVALID;
     92            BPEngenuics_bNotifcationEnabled = false;
     93          
     94            // Add the services and characteristics.
     95            error = BPEngenuicsAddService();
     96            error |= BPEngenuicsAddRxCharacteristic();
     97            error |= BPEngenuicsAddTxCharacteristic();
     98          
     99            return (error == NRF_SUCCESS);
    100          } /* end BPEngenuicsInitialize() */
    101          
    102          /*--------------------------------------------------------------------------------------------------------------------
    103          Function: BPEngenuicsOnConnect
    104          
    105          Description:
    106          Initializes the State Machine and its variables.
    107          
    108          Requires:
    109            - BPEngenuicsInitialize has been called.
    110            - peEvent_ points to an BLE event
    111          
    112          Promises:
    113            - On connection sets _BPENGENUICS_CONNECTED to notify the module that it is in the connected state 
    114          */
    115          void BPEngenuicsOnConnect(ble_evt_t* peEvent_)
    116          {
    117            // Update the BPEngenuics_u16ConnHandle. Module knows that it is connected to a client.
    118            BPEngenuics_u16ConnHandle = peEvent_->evt.gap_evt.conn_handle;
    119            G_u32BPEngenuicsFlags |= _BPENGENUICS_CONNECTED;
    120          }
    121          
    122          
    123          /*--------------------------------------------------------------------------------------------------------------------
    124          Function: BPEngenuicsOnDisconnect
    125          
    126          Description:
    127          Initializes the State Machine and its variables.
    128          
    129          Requires:
    130             - BPEngenuicsInitialize has been called
    131          
    132          Promises:
    133            - Notifies the module that it is in the disconnected state.
    134          */
    135          void BPEngenuicsOnDisconnect(void)
    136          {
    137            // Invalidate the BPEngenuics_u16ConnHandle. Module knows that it is in a disconnected state
    138            BPEngenuics_u16ConnHandle = BLE_CONN_HANDLE_INVALID;
    139            G_u32BPEngenuicsFlags &= ~_BPENGENUICS_CONNECTED;
    140          }
    141          
    142          
    143          /*--------------------------------------------------------------------------------------------------------------------
    144          Function: BPEngenuicsOnWrite
    145          
    146          Description:
    147          Handles the Service enabling/disabling. Handles the Value Char writes from Client.
    148          
    149          Requires:
    150             - Called after the module has been initialized.
    151             - evt is the ble_evt_t* containing the appropriate GATTS Write information
    152             
    153          Promises:
    154            - Handles Enabling/Disabling on the BPEngenuics TX Value Characteristic.
    155            - Handles Rx Messages sent from the client on the RX Value Characteristic.
    156          */
    157          void BPEngenuicsOnWrite(ble_evt_t* peEvent_)
    158          {
    159             // Create our ble_gatts_evt_write_t object.
    160              ble_gatts_evt_write_t* peEventWrite = &peEvent_->evt.gatts_evt.params.write;
    161              
    162              // Check if it is the TX Handle CCCD write event and len is 2.
    163              if ((peEventWrite->handle == BPEngenuics_eTxHandles.cccd_handle) && (peEventWrite->len == 2))
    164              {
    165                // Check if service needs to be enabled/disabled.
    166                if (ble_srv_is_notification_enabled(peEventWrite->data))
    167                {
    168                  BPEngenuics_bNotifcationEnabled = true;
    169                  G_u32BPEngenuicsFlags |= _BPENGENUICS_SERVICE_ENABLED;
    170                }
    171                else
    172                {
    173                  BPEngenuics_bNotifcationEnabled = false;
    174                  G_u32BPEngenuicsFlags &= ~_BPENGENUICS_SERVICE_ENABLED;
    175                }
    176              }
    177              else if (peEventWrite->handle == BPEngenuics_eRxHandles.value_handle)    
    178              {
    179                CallbackBleperipheralEngenuicsDataRx(peEventWrite->data, peEventWrite->len);
    180              }    
    181          }
    182          
    183          
    184          /*--------------------------------------------------------------------------------------------------------------------*/
    185          /* Private functions                                                                                                  */
    186          /*--------------------------------------------------------------------------------------------------------------------*/
    187          
    188          /*--------------------------------------------------------------------------------------------------------------------
    189          Function: BPEngenuicsAddService
    190          
    191          Description:
    192          Registers the service
    193          
    194          Requires:
    195             - Called after the module has been intialized.
    196             
    197          Promises:
    198            - Adds the BPEngenuics Rx Service.
    199            - Registers a properietary 128bit Service UUID base.
    200            - Followed by 16bit Service identifier. 
    201          */
    202          static u32 BPEngenuicsAddService(void)
    203          {
    204             u32 u32Error;
    205             ble_uuid_t ble_uuid;
    206             ble_uuid128_t ble_base_uuid = BPENGENUICS_BASE_UUID;
    207          
    208             // Add Service UUID with base .
    209             u32Error = sd_ble_uuid_vs_add(&ble_base_uuid, &BPEngenuics_u8UuidType);
    210          
    211             // Add the 16bit unique value to base.
    212             ble_uuid.type = BPEngenuics_u8UuidType;
    213             ble_uuid.uuid = BPENGENUICS_SERVICE_UUID;
    214             u32Error = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &BPEngenuics_u16ServiceHandle);
    215          
    216             return u32Error;
    217          }
    218          
    219          
    220          /*--------------------------------------------------------------------------------------------------------------------
    221          Function: BPEngenuicsAddRxcharacteristic
    222          
    223          Description:
    224          Adds the Rx Characteristic to the BLE Service.
    225          
    226          Requires:
    227             - Called during module initialization
    228             
    229          Promises:
    230            - Adds the BPEngenuics Rx Characteristic.
    231          */
    232          static u32 BPEngenuicsAddRxCharacteristic(void)
    233          {
    234              ble_gatts_char_md_t rxchar_metadata;
    235              ble_gatts_attr_t    attr_char_value;
    236              ble_uuid_t          ble_uuid;
    237              ble_gatts_attr_md_t attr_md;
    238          
    239             // Metadata for the Rx Characteristic.
    240              memset(&rxchar_metadata, 0, sizeof(rxchar_metadata));
    241              rxchar_metadata.char_props.write = 1;
    242              rxchar_metadata.char_props.write_wo_resp = 1;
    243            
    244              // Load the RX CHAR UUID.
    245              ble_uuid.type = BPEngenuics_u8UuidType;
    246              ble_uuid.uuid = BPENGENUICS_RX_CHAR_UUID;
    247          
    248              // Metadata for the Rx Attribute.
    249              memset(&attr_md, 0, sizeof(attr_md));
    250              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
    251              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
    252              attr_md.vloc = BLE_GATTS_VLOC_STACK;
    253              attr_md.vlen = 1;
    254          
    255              // Setup of the Rx Attribute.
    256              memset(&attr_char_value, 0, sizeof(attr_char_value));
    257              attr_char_value.p_uuid    = &ble_uuid;
    258              attr_char_value.p_attr_md = &attr_md;
    259              attr_char_value.init_len  = BPENGENUICS_MAX_CHAR_LEN;
    260              attr_char_value.max_len   = BPENGENUICS_MAX_CHAR_LEN;
    261          
    262              return sd_ble_gatts_characteristic_add(BPEngenuics_u16ServiceHandle, &rxchar_metadata, &attr_char_value, &BPEngenuics_eRxHandles);
    263          }
    264          
    265          /*--------------------------------------------------------------------------------------------------------------------
    266          Function: BPEngenuicsAddTxcharacteristic
    267          
    268          Description:
    269          Adds the Tx Characteristic to the BLE Service.
    270          
    271          Requires:
    272             - Called during module initialization.
    273             
    274          Promises:
    275            - Adds the BPEngenuics Tx Characteristic.
    276          */
    277          static u32 BPEngenuicsAddTxCharacteristic(void)
    278          {
    279              ble_gatts_char_md_t txchar_metadata;
    280              ble_gatts_attr_md_t cccd_md;
    281              ble_gatts_attr_t    attr_char_value;
    282              ble_uuid_t          ble_uuid;
    283              ble_gatts_attr_md_t attr_md;
    284          
    285              // ClientConfigurationDescriptor Metadata.
    286              memset(&cccd_md, 0, sizeof(cccd_md));
    287              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
    288              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
    289          
    290              // Location of CCCD characteristic is on user stack.
    291              cccd_md.vloc = BLE_GATTS_VLOC_STACK;
    292          
    293              // Metadata for the Tx Characteristic.
    294              memset(&txchar_metadata, 0, sizeof(txchar_metadata));
    295              txchar_metadata.char_props.notify = 1;
    296              txchar_metadata.p_cccd_md = &cccd_md;
    297          
    298              // Load the TX CHAR UUID.
    299              ble_uuid.type = BPEngenuics_u8UuidType;
    300              ble_uuid.uuid = BPENGENUICS_TX_CHAR_UUID;
    301          
    302              // Metadata for the Tx Attribute.
    303              memset(&attr_md, 0, sizeof(attr_md));
    304              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
    305              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
    306              attr_md.vloc = BLE_GATTS_VLOC_STACK;
    307              attr_md.vlen = 1;
    308          
    309              // Setup of the Tx Attribute.
    310              memset(&attr_char_value, 0, sizeof(attr_char_value));
    311              attr_char_value.p_uuid    = &ble_uuid;
    312              attr_char_value.p_attr_md = &attr_md;
    313              attr_char_value.init_len  = BPENGENUICS_MAX_CHAR_LEN;
    314              attr_char_value.max_len   = BPENGENUICS_MAX_CHAR_LEN;
    315          
    316              return sd_ble_gatts_characteristic_add(BPEngenuics_u16ServiceHandle, &txchar_metadata, &attr_char_value, &BPEngenuics_eTxHandles);
    317          }
    318          
    319          
    320          /*----------------------------------------------------------------------------------------------------------------------
    321          Function: CallbackBleperipheralEngenuicsDataRx
    322          
    323          Description:
    324          Callback to handle the message received on the RX Characteristic of the bleperipheral_engenuics profile.
    325          
    326          Requires:
    327            - data: pointer to array containing data.
    328            - len: Length of array
    329          
    330          Promises:
    331            - Application handling of the message.
    332          */
    333          static void CallbackBleperipheralEngenuicsDataRx(u8* u8Data_, u8 u8Length_)
    334          {
    335            // Forward handling to ANTTT module.
    336            AntttHandleIncomingMessage(u8Data_, u8Length_);
                   ^
Error[Pe223]: function "AntttHandleIncomingMessage" declared implicitly
    337          }
    338          
    339          /*--------------------------------------------------------------------------------------------------------------------*/
    340          /* End of File                                                                                                        */
    341          /*--------------------------------------------------------------------------------------------------------------------*/

Errors: 9
Warnings: none
