###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        29/Jun/2018  10:17:53
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\EiE\EiE Git\AntBleBeacon\application\main.c
#    Command line =  
#        "D:\EiE\EiE Git\AntBleBeacon\application\main.c" -D NRF51 -lC
#        "D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\List\" -o "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\INC\c\DLib_Config_Normal.h" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\bsp\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\application\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\"
#        -On --require_prototypes -I "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\CMSIS\Include\"
#    List file    =  D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\List\main.lst
#    Object file  =  D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\Obj\main.o
#
###############################################################################

D:\EiE\EiE Git\AntBleBeacon\application\main.c
      1          /***********************************************************************************************************************
      2          File: main.c                                                                
      3          
      4          Description:
      5          Container for the nRF51422 firmware.  
      6          ***********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */
     15          volatile u32 G_u32SystemTime1ms = 0;     /*!< @brief Global system time incremented every ms, max 2^32 (~49 days) */
     16          volatile u32 G_u32SystemTime1s  = 0;     /*!< @brief Global system time incremented every second, max 2^32 (~136 years) */
     17          volatile u32 G_u32SystemFlags   = 0;     /*!< @brief Global system flags */
     18          
     19          
     20          /*--------------------------------------------------------------------------------------------------------------------*/
     21          /* External global variables defined in other files (must indicate which file they are defined in) */
     22          
     23          
     24          /***********************************************************************************************************************
     25          Global variable definitions with scope limited to this local application.
     26          Variable names shall start with "Main_" and be declared as static.
     27          ***********************************************************************************************************************/
     28          static u32 Main_u32ErrorCode;
     29          static u8 Main_u8TestMessage[] = "9876 test message from ANT";
     30          
     31          
     32          /***********************************************************************************************************************
     33          Function Definitions
     34          ***********************************************************************************************************************/
     35          
     36          /***********************************************************************************************************************
     37          Main Program
     38          Main has two sections:
     39          
     40          1. Initialization which is run once on power-up or reset.  All drivers and applications are setup here without timing
     41          contraints but must complete execution regardless of success or failure of starting the application. 
     42          
     43          2. Main loop.  This is an event-driven system that sequentially executes tasks that require servicing in the event queue.
     44          
     45          ***********************************************************************************************************************/
     46          void main(void)
     47          {
     48            G_u32SystemFlags |= _SYSTEM_INITIALIZING;
     49            
     50            /*
     51            Due to the switch that the application makes from the User mode system to SoftDevice
     52            mode System, this module sets up the basic clocks and I/Os, followed by enabling the SD.
     53            Once the SD is enabled, the application shall only use the SD provided system calls
     54            */
     55            __disable_interrupt();
     56          
     57            /* Clock, GPIO and SoftDevice setup */  
     58            ClockSetup();
     59            GpioSetup();
     60          
     61            __enable_interrupt();
     62            
     63            /* Enable the s310 SoftDevice Stack. If Failure, we shall not progress as 
     64            successive code is dependent on SD success. */
     65            if (!SocIntegrationInitialize())
     66            {
     67              /* Lite up all the RED LEDs to indicate this state */
     68              NRF_GPIO->OUTSET = (RED0 | RED1 | RED2 | RED3 | RED4 | RED5 | RED6 | RED7);
     69              while (1);
     70            }
     71            
     72            /* Low Level Initialization Modules */
     73            WatchDogSetup(); 
     74            SysTickSetup();
     75            InterruptsInitialize();
     76              
     77            /* Driver initialization */
     78            LedInitialize();
     79            ButtonInitialize();
     80          
     81            ANTIntegrationInitialize();
     82            BLEIntegrationInitialize();
     83            bleperipheralInitialize();
     84            
     85            /* Application initialization */
     86            //PovInitialize();
     87            
     88            /* Exit initialization */
     89            G_u32SystemFlags &= ~_SYSTEM_INITIALIZING;
     90            
     91            /* Main loop */  
     92            while(1)
     93            {
     94              SocIntegrationHandler();
     95          
     96              /* Driver and Application State Machines */
     97              LedRunActiveState();
                     ^
Error[Pe223]: function "LedRunActiveState" declared implicitly

  static u32 Main_u32ErrorCode;
             ^
"D:\EiE\EiE Git\AntBleBeacon\application\main.c",28  Warning[Pe177]: variable
          "Main_u32ErrorCode" was declared but never referenced

  static u8 Main_u8TestMessage[] = "9876 test message from ANT";
            ^
"D:\EiE\EiE Git\AntBleBeacon\application\main.c",29  Warning[Pe177]: variable
          "Main_u8TestMessage" was declared but never referenced
     98              ButtonRunActiveState();
     99             
    100              //PovRunActiveState();
    101          
    102              SystemSleep();
    103              
    104            } /* end while(1) main super loop */
    105            
    106          } /* end main() */
    107          
    108          
    109          
    110          
    111          /*--------------------------------------------------------------------------------------------------------------------*/
    112          /* End of File */
    113          /*--------------------------------------------------------------------------------------------------------------------*/

Errors: 1
Warnings: 2
