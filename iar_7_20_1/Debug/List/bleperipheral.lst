###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        29/Jun/2018  10:17:51
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  D:\EiE\EiE Git\AntBleBeacon\bsp\bleperipheral.c
#    Command line =  
#        "D:\EiE\EiE Git\AntBleBeacon\bsp\bleperipheral.c" -D NRF51 -lC
#        "D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\List\" -o "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\Debug\Obj\" --no_cse --no_unroll
#        --no_inline --no_code_motion --no_tbaa --no_clustering --no_scheduling
#        --debug --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\INC\c\DLib_Config_Normal.h" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\bsp\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\application\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\"
#        -On --require_prototypes -I "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\CMSIS\Include\"
#    List file    =  
#        D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\List\bleperipheral.lst
#    Object file  =  
#        D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\Obj\bleperipheral.o
#
###############################################################################

D:\EiE\EiE Git\AntBleBeacon\bsp\bleperipheral.c
      1          /**********************************************************************************************************************
      2          File: bleperipheral.c                                                                
      3          
      4          Description:
      5          This is a bleperipheral .c file new source code
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32BLEPeripheralFlags;                 /* Global state flags */
   \                     G_u32BLEPeripheralFlags:
   \   00000000                      DS8 4
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemTime1ms;                /*!< @brief From main.c */
     21          extern volatile u32 G_u32SystemTime1s;                 /*!< @brief From main.c */
     22          extern volatile u32 G_u32SystemFlags;                  /*!< @brief From main.c */
     23          
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope limited to this local application.
     27          Variable names shall start with "SocInt_" and be declared as static.
     28          ***********************************************************************************************************************/
     29          //static u32 bleperipheral_u32Timeout;                      /* Timeout counter used across states */

   \                                 In section .bss, align 4
     30          static ble_gap_adv_params_t             m_adv_params;                                /**< Parameters to be passed to the stack when starting advertising. */
   \                     m_adv_params:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     31          static ble_gap_sec_params_t             m_sec_params;                                /**< Security requirements for this application. */
   \                     m_sec_params:
   \   00000000                      DS8 8

   \                                 In section .data, align 2
     32          static uint16_t                         m_conn_handle = BLE_CONN_HANDLE_INVALID;     /**< Handle of the current connection. */
   \                     m_conn_handle:
   \   00000000   0xFFFF             DC16 65535
     33          
     34          
     35          /**********************************************************************************************************************
     36          Function Definitions
     37          **********************************************************************************************************************/
     38          /*--------------------------------------------------------------------------------------------------------------------*/
     39          /* Public functions                                                                                                   */
     40          /*--------------------------------------------------------------------------------------------------------------------*/
     41          
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          /* Protected functions                                                                                                */
     44          /*--------------------------------------------------------------------------------------------------------------------*/
     45          /*----------------------------------------------------------------------------------------------------------------------
     46          Function: bleperipheralInitialize
     47          
     48          Description:
     49          Initializes the GAP and GATT layers services for the system. Starts the GAP Advertising.
     50          
     51          Requires:
     52            - None
     53          
     54          Promises:
     55            - Returns TRUE if all sub-systems are successfully activated.
     56            - Returns FALSE if a sub-system failed and was not activated successfully.
     57          */

   \                                 In section .text, align 2, keep-with-next
     58          bool bleperipheralInitialize(void)
     59          {
   \                     bleperipheralInitialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     60            bool bResult = false;
   \   00000002   0x2400             MOVS     R4,#+0
     61          
     62            // Set up all the base services for the peripheral mode.
     63            bResult |= bleperipheral_gap_params_init();
   \   00000004   0x.... 0x....      BL       bleperipheral_gap_params_init
   \   00000008   0x4320             ORRS     R0,R0,R4
   \   0000000A   0x0004             MOVS     R4,R0
     64            bResult |= bleperipheral_advertising_init();
   \   0000000C   0x.... 0x....      BL       bleperipheral_advertising_init
   \   00000010   0x4320             ORRS     R0,R0,R4
   \   00000012   0x0004             MOVS     R4,R0
     65            bResult |= bleperipheral_services_init();
   \   00000014   0x.... 0x....      BL       bleperipheral_services_init
   \   00000018   0x4320             ORRS     R0,R0,R4
   \   0000001A   0x0004             MOVS     R4,R0
     66            bleperipheral_sec_params_init();
   \   0000001C   0x.... 0x....      BL       bleperipheral_sec_params_init
     67            bResult |= bleperipheral_advertising_start();
   \   00000020   0x.... 0x....      BL       bleperipheral_advertising_start
   \   00000024   0x4320             ORRS     R0,R0,R4
   \   00000026   0x0004             MOVS     R4,R0
     68            
     69            return bResult;
   \   00000028   0x0020             MOVS     R0,R4
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xBD10             POP      {R4,PC}          ;; return
     70          }
     71          
     72          
     73          /*----------------------------------------------------------------------------------------------------------------------
     74          Function: blePeripheralEventHandler(ble_evt*)
     75          
     76          Description:
     77          The Event handler which handles the various GATT and GAP events received from the SoftDevice once BLE Services have been activated.
     78          
     79          Requires:
     80            - ble_evt_t*: Pointer to the single buffer holding the current ble_evt_t from the SoftDevice.
     81          
     82          Promises:
     83            - Decodes the ble_evt_t and handles message accordingly.
     84            - Returns TRUE if ble_evt_t decoded and action taken.
     85            - Returns FALSE if ble_evt_t decoded and action failed.
     86          */

   \                                 In section .text, align 2, keep-with-next
     87          bool bleperipheralEventHandler(ble_evt_t* p_ble_evt)
     88          {
   \                     bleperipheralEventHandler: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
     89              u32 u32ErrorCode = NRF_SUCCESS;
   \   00000004   0x2400             MOVS     R4,#+0
     90              
     91              switch (p_ble_evt->header.evt_id)
   \   00000006   0x8828             LDRH     R0,[R5, #+0]
   \   00000008   0x2810             CMP      R0,#+16
   \   0000000A   0xD00A             BEQ      ??bleperipheralEventHandler_0
   \   0000000C   0x2811             CMP      R0,#+17
   \   0000000E   0xD00F             BEQ      ??bleperipheralEventHandler_1
   \   00000010   0x2813             CMP      R0,#+19
   \   00000012   0xD015             BEQ      ??bleperipheralEventHandler_2
   \   00000014   0x2819             CMP      R0,#+25
   \   00000016   0xD01A             BEQ      ??bleperipheralEventHandler_3
   \   00000018   0x2850             CMP      R0,#+80
   \   0000001A   0xD020             BEQ      ??bleperipheralEventHandler_4
   \   0000001C   0x2852             CMP      R0,#+82
   \   0000001E   0xD017             BEQ      ??bleperipheralEventHandler_5
   \   00000020   0xE021             B        ??bleperipheralEventHandler_6
     92              {
     93                case BLE_GAP_EVT_CONNECTED:
     94                  m_conn_handle = p_ble_evt->evt.gap_evt.conn_handle;
   \                     ??bleperipheralEventHandler_0: (+1)
   \   00000022   0x88A8             LDRH     R0,[R5, #+4]
   \   00000024   0x....             LDR      R1,??DataTable5
   \   00000026   0x8008             STRH     R0,[R1, #+0]
     95                  BPEngenuicsOnConnect(p_ble_evt);
   \   00000028   0x0028             MOVS     R0,R5
   \   0000002A   0x.... 0x....      BL       BPEngenuicsOnConnect
     96                  break;
   \   0000002E   0xE01A             B        ??bleperipheralEventHandler_7
     97          
     98                case BLE_GAP_EVT_DISCONNECTED:
     99                  m_conn_handle = BLE_CONN_HANDLE_INVALID;
   \                     ??bleperipheralEventHandler_1: (+1)
   \   00000030   0x....             LDR      R0,??DataTable5_1  ;; 0xffff
   \   00000032   0x....             LDR      R1,??DataTable5
   \   00000034   0x8008             STRH     R0,[R1, #+0]
    100                  BPEngenuicsOnDisconnect();
   \   00000036   0x.... 0x....      BL       BPEngenuicsOnDisconnect
    101                  bleperipheral_advertising_start();
   \   0000003A   0x.... 0x....      BL       bleperipheral_advertising_start
    102                  break;
   \   0000003E   0xE012             B        ??bleperipheralEventHandler_7
    103          
    104                case BLE_GAP_EVT_SEC_PARAMS_REQUEST:
    105                  u32ErrorCode = sd_ble_gap_sec_params_reply(m_conn_handle,
    106                                                         BLE_GAP_SEC_STATUS_SUCCESS,
    107                                                         &m_sec_params);
   \                     ??bleperipheralEventHandler_2: (+1)
   \   00000040   0x....             LDR      R2,??DataTable5_2
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x....             LDR      R0,??DataTable5
   \   00000046   0x8800             LDRH     R0,[R0, #+0]
   \   00000048   0xDF7F             SVC      0x7F
   \   0000004A   0x0004             MOVS     R4,R0
    108                  break;
   \   0000004C   0xE00B             B        ??bleperipheralEventHandler_7
    109          
    110                case BLE_GAP_EVT_TIMEOUT:
    111                  break;
   \                     ??bleperipheralEventHandler_3: (+1)
   \   0000004E   0xE00A             B        ??bleperipheralEventHandler_7
    112          
    113                case BLE_GATTS_EVT_SYS_ATTR_MISSING:
    114                  u32ErrorCode = sd_ble_gatts_sys_attr_set(m_conn_handle, NULL, 0);
   \                     ??bleperipheralEventHandler_5: (+1)
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x....             LDR      R0,??DataTable5
   \   00000056   0x8800             LDRH     R0,[R0, #+0]
   \   00000058   0xDFA9             SVC      0xA9
   \   0000005A   0x0004             MOVS     R4,R0
    115                  break;
   \   0000005C   0xE003             B        ??bleperipheralEventHandler_7
    116                    
    117                case BLE_GATTS_EVT_WRITE:
    118                  BPEngenuicsOnWrite(p_ble_evt);
   \                     ??bleperipheralEventHandler_4: (+1)
   \   0000005E   0x0028             MOVS     R0,R5
   \   00000060   0x.... 0x....      BL       BPEngenuicsOnWrite
    119                  break;
   \   00000064   0xE7FF             B        ??bleperipheralEventHandler_7
    120          
    121                default:
    122                  // No implementation needed.
    123                  break;
    124              }
    125          
    126              return (u32ErrorCode == NRF_SUCCESS);
   \                     ??bleperipheralEventHandler_6: (+1)
   \                     ??bleperipheralEventHandler_7: (+1)
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD101             BNE      ??bleperipheralEventHandler_8
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE000             B        ??bleperipheralEventHandler_9
   \                     ??bleperipheralEventHandler_8: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??bleperipheralEventHandler_9: (+1)
   \   00000070   0xB2C0             UXTB     R0,R0
   \   00000072   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    127          }
    128          
    129          
    130          /*----------------------------------------------------------------------------------------------------------------------
    131          Function: bool bleperipheralIsConnectedandEnabled(void)
    132          
    133          Description:
    134          The Event handler which handles the various GATT and GAP events received from the SoftDevice once BLE Services have been activated.
    135          
    136          Requires:
    137            - ble_evt_t*: Pointer to the single buffer holding the current ble_evt_t from the SoftDevice.
    138          
    139          Promises:
    140            - Decodes the ble_evt_t and handles message accordingly.
    141            - Returns TRUE if ble_evt_t decoded and action taken.
    142            - Returns FALSE if ble_evt_t decoded and action failed.
    143          */

   \                                 In section .text, align 2, keep-with-next
    144          bool bleperipheralIsConnectedandEnabled(void)
    145          {
   \                     bleperipheralIsConnectedandEnabled: (+1)
   \   00000000   0xB500             PUSH     {LR}
    146             // Check if connected and service enabled on BLE.
    147             return (m_conn_handle != BLE_CONN_HANDLE_INVALID);
   \   00000002   0x....             LDR      R0,??DataTable5
   \   00000004   0x8800             LDRH     R0,[R0, #+0]
   \   00000006   0x....             LDR      R1,??DataTable5_1  ;; 0xffff
   \   00000008   0x4288             CMP      R0,R1
   \   0000000A   0xD001             BEQ      ??bleperipheralIsConnectedandEnabled_0
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE000             B        ??bleperipheralIsConnectedandEnabled_1
   \                     ??bleperipheralIsConnectedandEnabled_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??bleperipheralIsConnectedandEnabled_1: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD00             POP      {PC}             ;; return
    148          }
    149          
    150          
    151          /*--------------------------------------------------------------------------------------------------------------------*/
    152          /* Private functions                                                                                                */
    153          /*--------------------------------------------------------------------------------------------------------------------*/
    154          /*----------------------------------------------------------------------------------------------------------------------
    155          Function: bleperipheral_gap_params_init
    156          
    157          Description:
    158          Initializes the GAP parameters for the device. Sets the device name, sets the device 
    159          appearance type and defines the peripheral requested rates.
    160          
    161          Requires:
    162            - None
    163          
    164          Promises:
    165            - Returns TRUE if GAP params are successfully completed.
    166            - Returns FALSE if GAP params are not set successfully.
    167          */

   \                                 In section .text, align 2, keep-with-next
    168          static bool bleperipheral_gap_params_init(void)
    169          {
   \                     bleperipheral_gap_params_init: (+1)
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
    170              u32 u32ErrorCode = NRF_SUCCESS;
   \   00000002   0x2400             MOVS     R4,#+0
    171              ble_gap_conn_params_t   gap_conn_params;
    172              ble_gap_conn_sec_mode_t sec_mode;
    173          
    174              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&sec_mode);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x4669             MOV      R1,SP
   \   00000008   0x7008             STRB     R0,[R1, #+0]
   \   0000000A   0x4668             MOV      R0,SP
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000010   0x0F00             LSRS     R0,R0,#+28
   \   00000012   0x2110             MOVS     R1,#+16
   \   00000014   0x4301             ORRS     R1,R1,R0
   \   00000016   0x4668             MOV      R0,SP
   \   00000018   0x7001             STRB     R1,[R0, #+0]
    175          
    176              u32ErrorCode |= sd_ble_gap_device_name_set(&sec_mode, DEVICE_NAME, strlen(DEVICE_NAME));
   \   0000001A   0x2209             MOVS     R2,#+9
   \   0000001C   0x....             LDR      R1,??DataTable5_3
   \   0000001E   0x4668             MOV      R0,SP
   \   00000020   0xDF7C             SVC      0x7C
   \   00000022   0x4320             ORRS     R0,R0,R4
   \   00000024   0x0004             MOVS     R4,R0
    177              u32ErrorCode |= sd_ble_gap_appearance_set(BLEPERIPHERAL_DEVICE_APPEARANCE);
   \   00000026   0x20F1             MOVS     R0,#+241
   \   00000028   0x0080             LSLS     R0,R0,#+2        ;; #+964
   \   0000002A   0xDF78             SVC      0x78
   \   0000002C   0x4320             ORRS     R0,R0,R4
   \   0000002E   0x0004             MOVS     R4,R0
    178          
    179              memset(&gap_conn_params, 0, sizeof(gap_conn_params));
   \   00000030   0x2508             MOVS     R5,#+8
   \   00000032   0x2600             MOVS     R6,#+0
   \   00000034   0xAF01             ADD      R7,SP,#+4
   \   00000036   0x0032             MOVS     R2,R6
   \   00000038   0x0029             MOVS     R1,R5
   \   0000003A   0x0038             MOVS     R0,R7
   \   0000003C   0x.... 0x....      BL       __aeabi_memset
    180              gap_conn_params.min_conn_interval = MIN_CONN_INTERVAL;
   \   00000040   0x20C8             MOVS     R0,#+200
   \   00000042   0x0040             LSLS     R0,R0,#+1        ;; #+400
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x8088             STRH     R0,[R1, #+4]
    181              gap_conn_params.max_conn_interval = MAX_CONN_INTERVAL;
   \   00000048   0x20C8             MOVS     R0,#+200
   \   0000004A   0x0080             LSLS     R0,R0,#+2        ;; #+800
   \   0000004C   0xA901             ADD      R1,SP,#+4
   \   0000004E   0x8048             STRH     R0,[R1, #+2]
    182              gap_conn_params.slave_latency     = SLAVE_LATENCY;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0x8088             STRH     R0,[R1, #+4]
    183              gap_conn_params.conn_sup_timeout  = CONN_SUP_TIMEOUT;
   \   00000056   0x20C8             MOVS     R0,#+200
   \   00000058   0x0040             LSLS     R0,R0,#+1        ;; #+400
   \   0000005A   0xA901             ADD      R1,SP,#+4
   \   0000005C   0x80C8             STRH     R0,[R1, #+6]
    184          
    185              u32ErrorCode |= sd_ble_gap_ppcp_set(&gap_conn_params);
   \   0000005E   0xA801             ADD      R0,SP,#+4
   \   00000060   0xDF7A             SVC      0x7A
   \   00000062   0x4320             ORRS     R0,R0,R4
   \   00000064   0x0004             MOVS     R4,R0
    186              
    187              return (u32ErrorCode == NRF_SUCCESS);
   \   00000066   0x2C00             CMP      R4,#+0
   \   00000068   0xD101             BNE      ??bleperipheral_gap_params_init_0
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE000             B        ??bleperipheral_gap_params_init_1
   \                     ??bleperipheral_gap_params_init_0: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \                     ??bleperipheral_gap_params_init_1: (+1)
   \   00000070   0xB2C0             UXTB     R0,R0
   \   00000072   0xBDFE             POP      {R1-R7,PC}       ;; return
    188          }
    189          
    190          /*----------------------------------------------------------------------------------------------------------------------
    191          Function: bleperipheral_advertising_init
    192          
    193          Description:
    194          Initializes the advertising parameters for the device.
    195          
    196          Requires:
    197            - None
    198          
    199          Promises:
    200            - Returns TRUE if advertising params are successfully completed.
    201            - Returns FALSE if advertising params are not set successfully.
    202          */

   \                                 In section .text, align 2, keep-with-next
    203          static bool bleperipheral_advertising_init(void)
    204          {
   \                     bleperipheral_advertising_init: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
    205              u32 u32ErrorCode = NRF_SUCCESS;
   \   00000004   0x2400             MOVS     R4,#+0
    206              ble_advdata_t advdata;
    207              u8 u8Flags = BLE_GAP_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   \   00000006   0x2006             MOVS     R0,#+6
   \   00000008   0x4669             MOV      R1,SP
   \   0000000A   0x7008             STRB     R0,[R1, #+0]
    208          
    209              ble_uuid_t adv_uuids[] =
    210              {
    211                {BLE_UUID_HEART_RATE_SERVICE,         BLE_UUID_TYPE_BLE},
    212                {BLE_UUID_DEVICE_INFORMATION_SERVICE, BLE_UUID_TYPE_BLE}
    213              };
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x....             LDR      R1,??DataTable5_4
   \   00000010   0xC90C             LDM      R1!,{R2,R3}
   \   00000012   0xC00C             STM      R0!,{R2,R3}
   \   00000014   0x3908             SUBS     R1,R1,#+8
   \   00000016   0x3808             SUBS     R0,R0,#+8
    214          
    215              // Build and set advertising data
    216              memset(&advdata, 0, sizeof(advdata));
   \   00000018   0x2038             MOVS     R0,#+56
   \   0000001A   0x9002             STR      R0,[SP, #+8]
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x9001             STR      R0,[SP, #+4]
   \   00000020   0xAD06             ADD      R5,SP,#+24
   \   00000022   0x9A01             LDR      R2,[SP, #+4]
   \   00000024   0x9902             LDR      R1,[SP, #+8]
   \   00000026   0x0028             MOVS     R0,R5
   \   00000028   0x.... 0x....      BL       __aeabi_memset
   \   0000002C   0x9505             STR      R5,[SP, #+20]
    217          
    218              advdata.name_type               = BLE_ADVDATA_FULL_NAME;
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x4669             MOV      R1,SP
   \   00000032   0x7608             STRB     R0,[R1, #+24]
    219              advdata.include_appearance      = true;
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xA906             ADD      R1,SP,#+24
   \   00000038   0x7088             STRB     R0,[R1, #+2]
    220              advdata.flags.size              = sizeof(u8Flags);
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xA906             ADD      R1,SP,#+24
   \   0000003E   0x8088             STRH     R0,[R1, #+4]
    221              advdata.flags.p_data            = &u8Flags;
   \   00000040   0x4668             MOV      R0,SP
   \   00000042   0x9008             STR      R0,[SP, #+32]
    222              advdata.uuids_complete.uuid_cnt = sizeof(adv_uuids) / sizeof(adv_uuids[0]);
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0xA906             ADD      R1,SP,#+24
   \   00000048   0x8308             STRH     R0,[R1, #+24]
    223              advdata.uuids_complete.p_uuids  = adv_uuids;
   \   0000004A   0xA803             ADD      R0,SP,#+12
   \   0000004C   0x900D             STR      R0,[SP, #+52]
    224          
    225              u32ErrorCode |= ble_advdata_set(&advdata, NULL);
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0xA806             ADD      R0,SP,#+24
   \   00000052   0x.... 0x....      BL       ble_advdata_set
   \   00000056   0x4320             ORRS     R0,R0,R4
   \   00000058   0x0004             MOVS     R4,R0
    226          
    227              // Initialise advertising parameters (used when starting advertising)
    228              memset(&m_adv_params, 0, sizeof(m_adv_params));
   \   0000005A   0x2514             MOVS     R5,#+20
   \   0000005C   0x2600             MOVS     R6,#+0
   \   0000005E   0x....             LDR      R7,??DataTable5_5
   \   00000060   0x0032             MOVS     R2,R6
   \   00000062   0x0029             MOVS     R1,R5
   \   00000064   0x0038             MOVS     R0,R7
   \   00000066   0x.... 0x....      BL       __aeabi_memset
    229          
    230              m_adv_params.type        = BLE_GAP_ADV_TYPE_ADV_IND;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x....             LDR      R1,??DataTable5_5
   \   0000006E   0x7008             STRB     R0,[R1, #+0]
    231              m_adv_params.p_peer_addr = NULL;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x....             LDR      R1,??DataTable5_5
   \   00000074   0x6048             STR      R0,[R1, #+4]
    232              m_adv_params.fp          = BLE_GAP_ADV_FP_ANY;
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x....             LDR      R1,??DataTable5_5
   \   0000007A   0x7208             STRB     R0,[R1, #+8]
    233              m_adv_params.interval    = APP_ADV_INTERVAL;
   \   0000007C   0x2028             MOVS     R0,#+40
   \   0000007E   0x....             LDR      R1,??DataTable5_5
   \   00000080   0x8208             STRH     R0,[R1, #+16]
    234              m_adv_params.timeout     = APP_ADV_TIMEOUT_IN_SECONDS;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x....             LDR      R1,??DataTable5_5
   \   00000086   0x8248             STRH     R0,[R1, #+18]
    235              
    236              return u32ErrorCode == NRF_SUCCESS;
   \   00000088   0x2C00             CMP      R4,#+0
   \   0000008A   0xD101             BNE      ??bleperipheral_advertising_init_0
   \   0000008C   0x2001             MOVS     R0,#+1
   \   0000008E   0xE000             B        ??bleperipheral_advertising_init_1
   \                     ??bleperipheral_advertising_init_0: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \                     ??bleperipheral_advertising_init_1: (+1)
   \   00000092   0xB2C0             UXTB     R0,R0
   \   00000094   0xB015             ADD      SP,SP,#+84
   \   00000096   0xBDF0             POP      {R4-R7,PC}       ;; return
    237              
    238          }
    239          
    240          
    241          /*----------------------------------------------------------------------------------------------------------------------
    242          Function: bleperipheral_advertising_init
    243          
    244          Description:
    245          Initializes any BLE Peripheral Services.
    246          
    247          Requires:
    248            - None
    249          
    250          Promises:
    251            - Returns TRUE if service initialization successful.
    252            - Returns FALSE if service initialization fails.
    253          */

   \                                 In section .text, align 2, keep-with-next
    254          static bool bleperipheral_services_init(void)
    255          {
   \                     bleperipheral_services_init: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    256            // Initialize the BPEngenuics service.
    257            if ( !BPEngenuicsInitialize() )
   \   00000002   0x.... 0x....      BL       BPEngenuicsInitialize
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE      ??bleperipheral_services_init_0
    258            {
    259              return false;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE000             B        ??bleperipheral_services_init_1
    260            }
    261            
    262            return true;
   \                     ??bleperipheral_services_init_0: (+1)
   \   0000000E   0x2001             MOVS     R0,#+1
   \                     ??bleperipheral_services_init_1: (+1)
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
    263            
    264          }
    265          
    266          
    267          /*----------------------------------------------------------------------------------------------------------------------
    268          Function: bleperipheral_advertising_start
    269          
    270          Description:
    271          Start Advertising
    272          
    273          Requires:
    274            - None
    275          
    276          Promises:
    277            - Returns TRUE if advertising start successful.
    278            - Returns FALSE if advertising start fails.
    279          */

   \                                 In section .text, align 2, keep-with-next
    280          static bool bleperipheral_advertising_start(void)
    281          {
   \                     bleperipheral_advertising_start: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    282              u32 u32ErrorCode;
    283          
    284              u32ErrorCode = sd_ble_gap_adv_start(&m_adv_params);
   \   00000002   0x....             LDR      R0,??DataTable5_5
   \   00000004   0xDF73             SVC      0x73
   \   00000006   0x0001             MOVS     R1,R0
    285              return (u32ErrorCode == NRF_SUCCESS);
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD101             BNE      ??bleperipheral_advertising_start_0
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xE000             B        ??bleperipheral_advertising_start_1
   \                     ??bleperipheral_advertising_start_0: (+1)
   \   00000010   0x2000             MOVS     R0,#+0
   \                     ??bleperipheral_advertising_start_1: (+1)
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
    286          }
    287          
    288          
    289          /*----------------------------------------------------------------------------------------------------------------------
    290          Function: bleperipheral_sec_params_init
    291          
    292          Description:
    293          Initializes security parameteres.
    294          
    295          Requires:
    296            - None
    297          
    298          Promises:
    299            - None
    300          */

   \                                 In section .text, align 2, keep-with-next
    301          static void bleperipheral_sec_params_init(void)
    302          {
    303              m_sec_params.timeout      = SEC_PARAM_TIMEOUT;
   \                     bleperipheral_sec_params_init: (+1)
   \   00000000   0x201E             MOVS     R0,#+30
   \   00000002   0x....             LDR      R1,??DataTable5_2
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    304              m_sec_params.bond         = SEC_PARAM_BOND;
   \   00000006   0x....             LDR      R0,??DataTable5_2
   \   00000008   0x7880             LDRB     R0,[R0, #+2]
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x4301             ORRS     R1,R1,R0
   \   0000000E   0x....             LDR      R0,??DataTable5_2
   \   00000010   0x7081             STRB     R1,[R0, #+2]
    305              m_sec_params.mitm         = SEC_PARAM_MITM;
   \   00000012   0x....             LDR      R0,??DataTable5_2
   \   00000014   0x7880             LDRB     R0,[R0, #+2]
   \   00000016   0x21FD             MOVS     R1,#+253
   \   00000018   0x4001             ANDS     R1,R1,R0
   \   0000001A   0x....             LDR      R0,??DataTable5_2
   \   0000001C   0x7081             STRB     R1,[R0, #+2]
    306              m_sec_params.io_caps      = SEC_PARAM_IO_CAPABILITIES;
   \   0000001E   0x....             LDR      R0,??DataTable5_2
   \   00000020   0x7880             LDRB     R0,[R0, #+2]
   \   00000022   0x21E3             MOVS     R1,#+227
   \   00000024   0x4001             ANDS     R1,R1,R0
   \   00000026   0x200C             MOVS     R0,#+12
   \   00000028   0x4308             ORRS     R0,R0,R1
   \   0000002A   0x....             LDR      R1,??DataTable5_2
   \   0000002C   0x7088             STRB     R0,[R1, #+2]
    307              m_sec_params.oob          = SEC_PARAM_OOB;
   \   0000002E   0x....             LDR      R0,??DataTable5_2
   \   00000030   0x7880             LDRB     R0,[R0, #+2]
   \   00000032   0x21DF             MOVS     R1,#+223
   \   00000034   0x4001             ANDS     R1,R1,R0
   \   00000036   0x....             LDR      R0,??DataTable5_2
   \   00000038   0x7081             STRB     R1,[R0, #+2]
    308              m_sec_params.min_key_size = SEC_PARAM_MIN_KEY_SIZE;
   \   0000003A   0x2007             MOVS     R0,#+7
   \   0000003C   0x....             LDR      R1,??DataTable5_2
   \   0000003E   0x70C8             STRB     R0,[R1, #+3]
    309              m_sec_params.max_key_size = SEC_PARAM_MAX_KEY_SIZE;
   \   00000040   0x2010             MOVS     R0,#+16
   \   00000042   0x....             LDR      R1,??DataTable5_2
   \   00000044   0x7108             STRB     R0,[R1, #+4]
    310          }
   \   00000046   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5:
   \   00000000   0x........         DC32     m_conn_handle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_1:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_2:
   \   00000000   0x........         DC32     m_sec_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_4:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable5_5:
   \   00000000   0x........         DC32     m_adv_params

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x42 0x4C          DC8 "BLETT4660"
   \              0x45 0x54    
   \              0x54 0x34    
   \              0x36 0x36    
   \              0x30 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x180D             DC16 6157
   \   00000002   0x01 0x00          DC8 1, 0
   \   00000004   0x180A             DC16 6154
   \   00000006   0x01 0x00          DC8 1, 0
    311          
    312          
    313          
    314          
    315          
    316          
    317          /*--------------------------------------------------------------------------------------------------------------------*/
    318          /* End of File                                                                                                        */
    319          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   bleperipheralEventHandler
        16   -> BPEngenuicsOnConnect
        16   -> BPEngenuicsOnDisconnect
        16   -> BPEngenuicsOnWrite
        16   -> bleperipheral_advertising_start
       8   bleperipheralInitialize
         8   -> bleperipheral_advertising_init
         8   -> bleperipheral_advertising_start
         8   -> bleperipheral_gap_params_init
         8   -> bleperipheral_sec_params_init
         8   -> bleperipheral_services_init
       4   bleperipheralIsConnectedandEnabled
     104   bleperipheral_advertising_init
       104   -> __aeabi_memset
       104   -> ble_advdata_set
       8   bleperipheral_advertising_start
      32   bleperipheral_gap_params_init
        32   -> __aeabi_memset
       0   bleperipheral_sec_params_init
       8   bleperipheral_services_init
         8   -> BPEngenuicsInitialize


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
       4  ??DataTable5_3
       4  ??DataTable5_4
       4  ??DataTable5_5
      12  ?_0
       8  ?_1
       4  G_u32BLEPeripheralFlags
     116  bleperipheralEventHandler
      46  bleperipheralInitialize
      22  bleperipheralIsConnectedandEnabled
     152  bleperipheral_advertising_init
      22  bleperipheral_advertising_start
     116  bleperipheral_gap_params_init
      72  bleperipheral_sec_params_init
      18  bleperipheral_services_init
      20  m_adv_params
       2  m_conn_handle
       8  m_sec_params

 
  32 bytes in section .bss
   2 bytes in section .data
  20 bytes in section .rodata
 588 bytes in section .text
 
 588 bytes of CODE  memory
  20 bytes of CONST memory
  34 bytes of DATA  memory

Errors: none
Warnings: none
