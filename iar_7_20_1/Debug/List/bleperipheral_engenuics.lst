###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        29/Jun/2018  10:17:52
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\EiE\EiE Git\AntBleBeacon\application\bleperipheral_engenuics.c
#    Command line =  
#        "D:\EiE\EiE Git\AntBleBeacon\application\bleperipheral_engenuics.c" -D
#        NRF51 -lC "D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\List\" -o
#        "D:\EiE\EiE Git\AntBleBeacon\iar_7_20_1\Debug\Obj\" --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M0 -e --fpu=None
#        --dlib_config "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\INC\c\DLib_Config_Normal.h" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\bsp\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\application\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\" -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\s310\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\" -I
#        "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\ble_services\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\ble\device_manager\"
#        -I "D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\..\nordic_sdk6_1_0\Include\app_common\"
#        -On --require_prototypes -I "C:\Program Files\IAR
#        Systems\EWARM_7_20_1\arm\CMSIS\Include\"
#    List file    =  
#        D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\Debug\List\bleperipheral_engenuics.lst
#    Object file  =  
#        D:\EiE\EiE
#        Git\AntBleBeacon\iar_7_20_1\Debug\Obj\bleperipheral_engenuics.o
#
###############################################################################

D:\EiE\EiE Git\AntBleBeacon\application\bleperipheral_engenuics.c
      1          /**********************************************************************************************************************
      2          File: bleperipheral_engenuics.c                                                                
      3          
      4          Description:
      5          BLE Peripheral Service module for the Engenuics BLE Profile.
      6          **********************************************************************************************************************/
      7          
      8          #include "configuration.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp uint16_t uint16_decode(uint8_t const *)
   \                     uint16_decode: (+1)
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0x7840             LDRB     R0,[R0, #+1]
   \   00000004   0x0200             LSLS     R0,R0,#+8
   \   00000006   0x4308             ORRS     R0,R0,R1
   \   00000008   0xB280             UXTH     R0,R0
   \   0000000A   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp bool ble_srv_is_notification_enabled(uint8_t *)
   \                     ble_srv_is_notification_enabled: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       uint16_decode
   \   0000000A   0x0001             MOVS     R1,R0
   \   0000000C   0x0008             MOVS     R0,R1
   \   0000000E   0x07C0             LSLS     R0,R0,#+31       ;; ZeroExtS R0,R0,#+31,#+31
   \   00000010   0x0FC0             LSRS     R0,R0,#+31
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
      9          
     10          /***********************************************************************************************************************
     11          Global variable definitions with scope across entire project.
     12          All Global variable names shall start with "G_"
     13          ***********************************************************************************************************************/
     14          /* New variables */

   \                                 In section .bss, align 4
     15          volatile u32 G_u32BPEngenuicsFlags;                       /* Global state flags */
   \                     G_u32BPEngenuicsFlags:
   \   00000000                      DS8 4
     16          
     17          
     18          /*--------------------------------------------------------------------------------------------------------------------*/
     19          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     20          extern volatile u32 G_u32SystemTime1ms;                /*!< @brief From main.c */
     21          extern volatile u32 G_u32SystemTime1s;                 /*!< @brief From main.c */
     22          extern volatile u32 G_u32SystemFlags;                  /*!< @brief From main.c */
     23          
     24          
     25          /***********************************************************************************************************************
     26          Global variable definitions with scope limited to this local application.
     27          Variable names shall start with "BPEngenuics_" and be declared as static.
     28          ***********************************************************************************************************************/
     29          //static u32 BPEngenuics_u32Timeout;           /* Timeout counter used across states */

   \                                 In section .bss, align 1
     30          static u8  BPEngenuics_u8UuidType;                       /* UUID Type for BLEEngenuics service */ 
   \                     BPEngenuics_u8UuidType:
   \   00000000                      DS8 1

   \                                 In section .bss, align 2
     31          static u16 BPEngenuics_u16ServiceHandle;                 /* Handle for the GATTS Service */
   \                     BPEngenuics_u16ServiceHandle:
   \   00000000                      DS8 2

   \                                 In section .bss, align 4
     32          static ble_gatts_char_handles_t BPEngenuics_eTxHandles;  /* TX Characteristic Handles */
   \                     BPEngenuics_eTxHandles:
   \   00000000                      DS8 8

   \                                 In section .bss, align 4
     33          static ble_gatts_char_handles_t BPEngenuics_eRxHandles;  /* RX Characteristic Handles */          
   \                     BPEngenuics_eRxHandles:
   \   00000000                      DS8 8

   \                                 In section .bss, align 2
     34          static u16 BPEngenuics_u16ConnHandle;                    /* Connection handle indicating if the device is GAP Connected to Client*/
   \                     BPEngenuics_u16ConnHandle:
   \   00000000                      DS8 2

   \                                 In section .bss, align 1
     35          static bool BPEngenuics_bNotifcationEnabled;             /* Flag to indicate if Notifications have been enabled by the Client */
   \                     BPEngenuics_bNotifcationEnabled:
   \   00000000                      DS8 1
     36          
     37          
     38          /**********************************************************************************************************************
     39          Function Definitions
     40          **********************************************************************************************************************/
     41          
     42          /*--------------------------------------------------------------------------------------------------------------------*/
     43          /* Public functions                                                                                                   */
     44          /*--------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 2, keep-with-next
     45          bool BPEngenuicsSendData(u8* buffer, u8 size)
     46          {
   \                     BPEngenuicsSendData: (+1)
   \   00000000   0xB5F2             PUSH     {R1,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   \   00000004   0x0004             MOVS     R4,R0
     47            ble_gatts_hvx_params_t hvx;   // Indication / Notification structure.
     48          
     49            if (size > BPENGENUICS_MAX_CHAR_LEN)
   \   00000006   0x4668             MOV      R0,SP
   \   00000008   0x7C00             LDRB     R0,[R0, #+16]
   \   0000000A   0x2815             CMP      R0,#+21
   \   0000000C   0xDB01             BLT      ??BPEngenuicsSendData_0
     50              return false;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE026             B        ??BPEngenuicsSendData_1
     51            
     52            // Check that the module is connected AND notifications are enabled.
     53            if ((BPEngenuics_u16ConnHandle != BLE_CONN_HANDLE_INVALID) && (BPEngenuics_bNotifcationEnabled))
   \                     ??BPEngenuicsSendData_0: (+1)
   \   00000012   0x....             LDR      R0,??DataTable7
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0x....             LDR      R1,??DataTable6  ;; 0xffff
   \   00000018   0x4288             CMP      R0,R1
   \   0000001A   0xD020             BEQ      ??BPEngenuicsSendData_2
   \   0000001C   0x....             LDR      R0,??DataTable6_1
   \   0000001E   0x7800             LDRB     R0,[R0, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD01C             BEQ      ??BPEngenuicsSendData_2
     54            {
     55              memset(&hvx, 0, sizeof(hvx));
   \   00000024   0x2510             MOVS     R5,#+16
   \   00000026   0x2600             MOVS     R6,#+0
   \   00000028   0x466F             MOV      R7,SP
   \   0000002A   0x0032             MOVS     R2,R6
   \   0000002C   0x0029             MOVS     R1,R5
   \   0000002E   0x0038             MOVS     R0,R7
   \   00000030   0x.... 0x....      BL       __aeabi_memset
     56              hvx.handle = BPEngenuics_eTxHandles.value_handle;
   \   00000034   0x....             LDR      R0,??DataTable6_2
   \   00000036   0x8800             LDRH     R0,[R0, #+0]
   \   00000038   0x4669             MOV      R1,SP
   \   0000003A   0x8008             STRH     R0,[R1, #+0]
     57              hvx.p_data = buffer;
   \   0000003C   0x9403             STR      R4,[SP, #+12]
     58              hvx.p_len = (uint16_t*)&size;
   \   0000003E   0xA804             ADD      R0,SP,#+16
   \   00000040   0x9002             STR      R0,[SP, #+8]
     59              hvx.type = BLE_GATT_HVX_NOTIFICATION;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x4669             MOV      R1,SP
   \   00000046   0x7088             STRB     R0,[R1, #+2]
     60              
     61              return (sd_ble_gatts_hvx(BPEngenuics_u16ConnHandle, &hvx) == NRF_SUCCESS);
   \   00000048   0x4669             MOV      R1,SP
   \   0000004A   0x....             LDR      R0,??DataTable7
   \   0000004C   0x8800             LDRH     R0,[R0, #+0]
   \   0000004E   0xDFA6             SVC      0xA6
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD101             BNE      ??BPEngenuicsSendData_3
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xE000             B        ??BPEngenuicsSendData_4
   \                     ??BPEngenuicsSendData_3: (+1)
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??BPEngenuicsSendData_4: (+1)
   \   0000005A   0xB2C0             UXTB     R0,R0
   \   0000005C   0xE000             B        ??BPEngenuicsSendData_1
     62            }
     63            else
     64            {
     65              return false;
   \                     ??BPEngenuicsSendData_2: (+1)
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??BPEngenuicsSendData_1: (+1)
   \   00000060   0xB005             ADD      SP,SP,#+20
   \   00000062   0xBDF0             POP      {R4-R7,PC}       ;; return
     66            }
     67          }
     68          
     69          /*--------------------------------------------------------------------------------------------------------------------*/
     70          /* Protected functions                                                                                                */
     71          /*--------------------------------------------------------------------------------------------------------------------*/
     72          /*--------------------------------------------------------------------------------------------------------------------
     73          Function: BPEngenuicsInitialize
     74          
     75          Description:
     76          Initializes the State Machine and its variables.
     77          
     78          Requires:
     79             - Called after the stack has been initialized.
     80             - Called from the BLEIntegrationHandlerInitialize
     81          
     82          Promises:
     83            - Characteristics are registered to the Services.
     84            - Service is registered with the stack for operations.
     85          */

   \                                 In section .text, align 2, keep-with-next
     86          bool BPEngenuicsInitialize(void)
     87          {
   \                     BPEngenuicsInitialize: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
     88            u32 error;
     89          
     90            // Initialize.
     91            BPEngenuics_u16ConnHandle = BLE_CONN_HANDLE_INVALID;
   \   00000002   0x....             LDR      R0,??DataTable6  ;; 0xffff
   \   00000004   0x....             LDR      R1,??DataTable7
   \   00000006   0x8008             STRH     R0,[R1, #+0]
     92            BPEngenuics_bNotifcationEnabled = false;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x....             LDR      R1,??DataTable6_1
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
     93          
     94            // Add the services and characteristics.
     95            error = BPEngenuicsAddService();
   \   0000000E   0x.... 0x....      BL       BPEngenuicsAddService
   \   00000012   0x0004             MOVS     R4,R0
     96            error |= BPEngenuicsAddRxCharacteristic();
   \   00000014   0x.... 0x....      BL       BPEngenuicsAddRxCharacteristic
   \   00000018   0x4320             ORRS     R0,R0,R4
   \   0000001A   0x0004             MOVS     R4,R0
     97            error |= BPEngenuicsAddTxCharacteristic();
   \   0000001C   0x.... 0x....      BL       BPEngenuicsAddTxCharacteristic
   \   00000020   0x4320             ORRS     R0,R0,R4
   \   00000022   0x0004             MOVS     R4,R0
     98          
     99            return (error == NRF_SUCCESS);
   \   00000024   0x2C00             CMP      R4,#+0
   \   00000026   0xD101             BNE      ??BPEngenuicsInitialize_0
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xE000             B        ??BPEngenuicsInitialize_1
   \                     ??BPEngenuicsInitialize_0: (+1)
   \   0000002C   0x2000             MOVS     R0,#+0
   \                     ??BPEngenuicsInitialize_1: (+1)
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
    100          } /* end BPEngenuicsInitialize() */
    101          
    102          /*--------------------------------------------------------------------------------------------------------------------
    103          Function: BPEngenuicsOnConnect
    104          
    105          Description:
    106          Initializes the State Machine and its variables.
    107          
    108          Requires:
    109            - BPEngenuicsInitialize has been called.
    110            - peEvent_ points to an BLE event
    111          
    112          Promises:
    113            - On connection sets _BPENGENUICS_CONNECTED to notify the module that it is in the connected state 
    114          */

   \                                 In section .text, align 2, keep-with-next
    115          void BPEngenuicsOnConnect(ble_evt_t* peEvent_)
    116          {
    117            // Update the BPEngenuics_u16ConnHandle. Module knows that it is connected to a client.
    118            BPEngenuics_u16ConnHandle = peEvent_->evt.gap_evt.conn_handle;
   \                     BPEngenuicsOnConnect: (+1)
   \   00000000   0x8881             LDRH     R1,[R0, #+4]
   \   00000002   0x....             LDR      R2,??DataTable7
   \   00000004   0x8011             STRH     R1,[R2, #+0]
    119            G_u32BPEngenuicsFlags |= _BPENGENUICS_CONNECTED;
   \   00000006   0x....             LDR      R1,??DataTable7_1
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0x2201             MOVS     R2,#+1
   \   0000000C   0x430A             ORRS     R2,R2,R1
   \   0000000E   0x....             LDR      R1,??DataTable7_1
   \   00000010   0x600A             STR      R2,[R1, #+0]
    120          }
   \   00000012   0x4770             BX       LR               ;; return
    121          
    122          
    123          /*--------------------------------------------------------------------------------------------------------------------
    124          Function: BPEngenuicsOnDisconnect
    125          
    126          Description:
    127          Initializes the State Machine and its variables.
    128          
    129          Requires:
    130             - BPEngenuicsInitialize has been called
    131          
    132          Promises:
    133            - Notifies the module that it is in the disconnected state.
    134          */

   \                                 In section .text, align 2, keep-with-next
    135          void BPEngenuicsOnDisconnect(void)
    136          {
    137            // Invalidate the BPEngenuics_u16ConnHandle. Module knows that it is in a disconnected state
    138            BPEngenuics_u16ConnHandle = BLE_CONN_HANDLE_INVALID;
   \                     BPEngenuicsOnDisconnect: (+1)
   \   00000000   0x....             LDR      R0,??DataTable6  ;; 0xffff
   \   00000002   0x....             LDR      R1,??DataTable7
   \   00000004   0x8008             STRH     R0,[R1, #+0]
    139            G_u32BPEngenuicsFlags &= ~_BPENGENUICS_CONNECTED;
   \   00000006   0x....             LDR      R0,??DataTable7_1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x2101             MOVS     R1,#+1
   \   0000000C   0x4388             BICS     R0,R0,R1
   \   0000000E   0x....             LDR      R1,??DataTable7_1
   \   00000010   0x6008             STR      R0,[R1, #+0]
    140          }
   \   00000012   0x4770             BX       LR               ;; return
    141          
    142          
    143          /*--------------------------------------------------------------------------------------------------------------------
    144          Function: BPEngenuicsOnWrite
    145          
    146          Description:
    147          Handles the Service enabling/disabling. Handles the Value Char writes from Client.
    148          
    149          Requires:
    150             - Called after the module has been initialized.
    151             - evt is the ble_evt_t* containing the appropriate GATTS Write information
    152             
    153          Promises:
    154            - Handles Enabling/Disabling on the BPEngenuics TX Value Characteristic.
    155            - Handles Rx Messages sent from the client on the RX Value Characteristic.
    156          */

   \                                 In section .text, align 2, keep-with-next
    157          void BPEngenuicsOnWrite(ble_evt_t* peEvent_)
    158          {
   \                     BPEngenuicsOnWrite: (+1)
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0005             MOVS     R5,R0
    159             // Create our ble_gatts_evt_write_t object.
    160              ble_gatts_evt_write_t* peEventWrite = &peEvent_->evt.gatts_evt.params.write;
   \   00000004   0x002C             MOVS     R4,R5
   \   00000006   0x1DA4             ADDS     R4,R4,#+6
    161              
    162              // Check if it is the TX Handle CCCD write event and len is 2.
    163              if ((peEventWrite->handle == BPEngenuics_eTxHandles.cccd_handle) && (peEventWrite->len == 2))
   \   00000008   0x8820             LDRH     R0,[R4, #+0]
   \   0000000A   0x....             LDR      R1,??DataTable6_2
   \   0000000C   0x8889             LDRH     R1,[R1, #+4]
   \   0000000E   0x4288             CMP      R0,R1
   \   00000010   0xD11C             BNE      ??BPEngenuicsOnWrite_0
   \   00000012   0x8B20             LDRH     R0,[R4, #+24]
   \   00000014   0x2802             CMP      R0,#+2
   \   00000016   0xD119             BNE      ??BPEngenuicsOnWrite_0
    164              {
    165                // Check if service needs to be enabled/disabled.
    166                if (ble_srv_is_notification_enabled(peEventWrite->data))
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x301A             ADDS     R0,R0,#+26
   \   0000001C   0x.... 0x....      BL       ble_srv_is_notification_enabled
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD009             BEQ      ??BPEngenuicsOnWrite_1
    167                {
    168                  BPEngenuics_bNotifcationEnabled = true;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x....             LDR      R1,??DataTable6_1
   \   00000028   0x7008             STRB     R0,[R1, #+0]
    169                  G_u32BPEngenuicsFlags |= _BPENGENUICS_SERVICE_ENABLED;
   \   0000002A   0x....             LDR      R0,??DataTable7_1
   \   0000002C   0x6800             LDR      R0,[R0, #+0]
   \   0000002E   0x2102             MOVS     R1,#+2
   \   00000030   0x4301             ORRS     R1,R1,R0
   \   00000032   0x....             LDR      R0,??DataTable7_1
   \   00000034   0x6001             STR      R1,[R0, #+0]
   \   00000036   0xE014             B        ??BPEngenuicsOnWrite_2
    170                }
    171                else
    172                {
    173                  BPEngenuics_bNotifcationEnabled = false;
   \                     ??BPEngenuicsOnWrite_1: (+1)
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x....             LDR      R1,??DataTable6_1
   \   0000003C   0x7008             STRB     R0,[R1, #+0]
    174                  G_u32BPEngenuicsFlags &= ~_BPENGENUICS_SERVICE_ENABLED;
   \   0000003E   0x....             LDR      R0,??DataTable7_1
   \   00000040   0x6800             LDR      R0,[R0, #+0]
   \   00000042   0x2102             MOVS     R1,#+2
   \   00000044   0x4388             BICS     R0,R0,R1
   \   00000046   0x....             LDR      R1,??DataTable7_1
   \   00000048   0x6008             STR      R0,[R1, #+0]
   \   0000004A   0xE00A             B        ??BPEngenuicsOnWrite_2
    175                }
    176              }
    177              else if (peEventWrite->handle == BPEngenuics_eRxHandles.value_handle)    
   \                     ??BPEngenuicsOnWrite_0: (+1)
   \   0000004C   0x8820             LDRH     R0,[R4, #+0]
   \   0000004E   0x....             LDR      R1,??DataTable7_2
   \   00000050   0x8809             LDRH     R1,[R1, #+0]
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD105             BNE      ??BPEngenuicsOnWrite_2
    178              {
    179                CallbackBleperipheralEngenuicsDataRx(peEventWrite->data, peEventWrite->len);
   \   00000056   0x8B21             LDRH     R1,[R4, #+24]
   \   00000058   0xB2C9             UXTB     R1,R1
   \   0000005A   0x0020             MOVS     R0,R4
   \   0000005C   0x301A             ADDS     R0,R0,#+26
   \   0000005E   0x.... 0x....      BL       CallbackBleperipheralEngenuicsDataRx
    180              }    
    181          }
   \                     ??BPEngenuicsOnWrite_2: (+1)
   \   00000062   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    182          
    183          
    184          /*--------------------------------------------------------------------------------------------------------------------*/
    185          /* Private functions                                                                                                  */
    186          /*--------------------------------------------------------------------------------------------------------------------*/
    187          
    188          /*--------------------------------------------------------------------------------------------------------------------
    189          Function: BPEngenuicsAddService
    190          
    191          Description:
    192          Registers the service
    193          
    194          Requires:
    195             - Called after the module has been intialized.
    196             
    197          Promises:
    198            - Adds the BPEngenuics Rx Service.
    199            - Registers a properietary 128bit Service UUID base.
    200            - Followed by 16bit Service identifier. 
    201          */

   \                                 In section .text, align 2, keep-with-next
    202          static u32 BPEngenuicsAddService(void)
    203          {
   \                     BPEngenuicsAddService: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
    204             u32 u32Error;
    205             ble_uuid_t ble_uuid;
    206             ble_uuid128_t ble_base_uuid = BPENGENUICS_BASE_UUID;
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x....             LDR      R1,??DataTable7_3
   \   00000008   0x2210             MOVS     R2,#+16
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy4
    207          
    208             // Add Service UUID with base .
    209             u32Error = sd_ble_uuid_vs_add(&ble_base_uuid, &BPEngenuics_u8UuidType);
   \   0000000E   0x....             LDR      R1,??DataTable7_4
   \   00000010   0xA801             ADD      R0,SP,#+4
   \   00000012   0xDF62             SVC      0x62
   \   00000014   0x0004             MOVS     R4,R0
    210          
    211             // Add the 16bit unique value to base.
    212             ble_uuid.type = BPEngenuics_u8UuidType;
   \   00000016   0x....             LDR      R0,??DataTable7_4
   \   00000018   0x7800             LDRB     R0,[R0, #+0]
   \   0000001A   0x4669             MOV      R1,SP
   \   0000001C   0x7088             STRB     R0,[R1, #+2]
    213             ble_uuid.uuid = BPENGENUICS_SERVICE_UUID;
   \   0000001E   0x....             LDR      R0,??DataTable7_5  ;; 0xeeee
   \   00000020   0x4669             MOV      R1,SP
   \   00000022   0x8008             STRH     R0,[R1, #+0]
    214             u32Error = sd_ble_gatts_service_add(BLE_GATTS_SRVC_TYPE_PRIMARY, &ble_uuid, &BPEngenuics_u16ServiceHandle);
   \   00000024   0x....             LDR      R2,??DataTable7_6
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xDFA0             SVC      0xA0
   \   0000002C   0x0004             MOVS     R4,R0
    215          
    216             return u32Error;
   \   0000002E   0x0020             MOVS     R0,R4
   \   00000030   0xB006             ADD      SP,SP,#+24
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
    217          }
    218          
    219          
    220          /*--------------------------------------------------------------------------------------------------------------------
    221          Function: BPEngenuicsAddRxcharacteristic
    222          
    223          Description:
    224          Adds the Rx Characteristic to the BLE Service.
    225          
    226          Requires:
    227             - Called during module initialization
    228             
    229          Promises:
    230            - Adds the BPEngenuics Rx Characteristic.
    231          */

   \                                 In section .text, align 2, keep-with-next
    232          static u32 BPEngenuicsAddRxCharacteristic(void)
    233          {
   \                     BPEngenuicsAddRxCharacteristic: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
    234              ble_gatts_char_md_t rxchar_metadata;
    235              ble_gatts_attr_t    attr_char_value;
    236              ble_uuid_t          ble_uuid;
    237              ble_gatts_attr_md_t attr_md;
    238          
    239             // Metadata for the Rx Characteristic.
    240              memset(&rxchar_metadata, 0, sizeof(rxchar_metadata));
   \   00000004   0x201C             MOVS     R0,#+28
   \   00000006   0x9005             STR      R0,[SP, #+20]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9004             STR      R0,[SP, #+16]
   \   0000000C   0xAC0B             ADD      R4,SP,#+44
   \   0000000E   0x9A04             LDR      R2,[SP, #+16]
   \   00000010   0x9905             LDR      R1,[SP, #+20]
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       __aeabi_memset
   \   00000018   0x9402             STR      R4,[SP, #+8]
    241              rxchar_metadata.char_props.write = 1;
   \   0000001A   0xA80B             ADD      R0,SP,#+44
   \   0000001C   0x7800             LDRB     R0,[R0, #+0]
   \   0000001E   0x2108             MOVS     R1,#+8
   \   00000020   0x4301             ORRS     R1,R1,R0
   \   00000022   0xA80B             ADD      R0,SP,#+44
   \   00000024   0x7001             STRB     R1,[R0, #+0]
    242              rxchar_metadata.char_props.write_wo_resp = 1;
   \   00000026   0xA80B             ADD      R0,SP,#+44
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2104             MOVS     R1,#+4
   \   0000002C   0x4301             ORRS     R1,R1,R0
   \   0000002E   0xA80B             ADD      R0,SP,#+44
   \   00000030   0x7001             STRB     R1,[R0, #+0]
    243            
    244              // Load the RX CHAR UUID.
    245              ble_uuid.type = BPEngenuics_u8UuidType;
   \   00000032   0x....             LDR      R0,??DataTable7_4
   \   00000034   0x7800             LDRB     R0,[R0, #+0]
   \   00000036   0xA901             ADD      R1,SP,#+4
   \   00000038   0x7088             STRB     R0,[R1, #+2]
    246              ble_uuid.uuid = BPENGENUICS_RX_CHAR_UUID;
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0x4669             MOV      R1,SP
   \   0000003E   0x8088             STRH     R0,[R1, #+4]
    247          
    248              // Metadata for the Rx Attribute.
    249              memset(&attr_md, 0, sizeof(attr_md));
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x9003             STR      R0,[SP, #+12]
   \   00000044   0x2400             MOVS     R4,#+0
   \   00000046   0x466D             MOV      R5,SP
   \   00000048   0x0022             MOVS     R2,R4
   \   0000004A   0x9903             LDR      R1,[SP, #+12]
   \   0000004C   0x0028             MOVS     R0,R5
   \   0000004E   0x.... 0x....      BL       __aeabi_memset
   \   00000052   0x9502             STR      R5,[SP, #+8]
    250              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
   \   00000054   0x4668             MOV      R0,SP
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x21F0             MOVS     R1,#+240
   \   0000005A   0x4001             ANDS     R1,R1,R0
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x4308             ORRS     R0,R0,R1
   \   00000060   0x4669             MOV      R1,SP
   \   00000062   0x7008             STRB     R0,[R1, #+0]
   \   00000064   0x4668             MOV      R0,SP
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   0000006A   0x0F00             LSRS     R0,R0,#+28
   \   0000006C   0x2110             MOVS     R1,#+16
   \   0000006E   0x4301             ORRS     R1,R1,R0
   \   00000070   0x4668             MOV      R0,SP
   \   00000072   0x7001             STRB     R1,[R0, #+0]
    251              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
   \   00000074   0x4668             MOV      R0,SP
   \   00000076   0x7840             LDRB     R0,[R0, #+1]
   \   00000078   0x21F0             MOVS     R1,#+240
   \   0000007A   0x4001             ANDS     R1,R1,R0
   \   0000007C   0x2001             MOVS     R0,#+1
   \   0000007E   0x4308             ORRS     R0,R0,R1
   \   00000080   0x4669             MOV      R1,SP
   \   00000082   0x7048             STRB     R0,[R1, #+1]
   \   00000084   0x4668             MOV      R0,SP
   \   00000086   0x7840             LDRB     R0,[R0, #+1]
   \   00000088   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   0000008A   0x0F00             LSRS     R0,R0,#+28
   \   0000008C   0x2110             MOVS     R1,#+16
   \   0000008E   0x4301             ORRS     R1,R1,R0
   \   00000090   0x4668             MOV      R0,SP
   \   00000092   0x7041             STRB     R1,[R0, #+1]
    252              attr_md.vloc = BLE_GATTS_VLOC_STACK;
   \   00000094   0x4668             MOV      R0,SP
   \   00000096   0x7880             LDRB     R0,[R0, #+2]
   \   00000098   0x21F9             MOVS     R1,#+249
   \   0000009A   0x4001             ANDS     R1,R1,R0
   \   0000009C   0x2002             MOVS     R0,#+2
   \   0000009E   0x4308             ORRS     R0,R0,R1
   \   000000A0   0x4669             MOV      R1,SP
   \   000000A2   0x7088             STRB     R0,[R1, #+2]
    253              attr_md.vlen = 1;
   \   000000A4   0x4668             MOV      R0,SP
   \   000000A6   0x7880             LDRB     R0,[R0, #+2]
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0x4301             ORRS     R1,R1,R0
   \   000000AC   0x4668             MOV      R0,SP
   \   000000AE   0x7081             STRB     R1,[R0, #+2]
    254          
    255              // Setup of the Rx Attribute.
    256              memset(&attr_char_value, 0, sizeof(attr_char_value));
   \   000000B0   0x2514             MOVS     R5,#+20
   \   000000B2   0x2600             MOVS     R6,#+0
   \   000000B4   0xAF06             ADD      R7,SP,#+24
   \   000000B6   0x0032             MOVS     R2,R6
   \   000000B8   0x0029             MOVS     R1,R5
   \   000000BA   0x0038             MOVS     R0,R7
   \   000000BC   0x.... 0x....      BL       __aeabi_memset
    257              attr_char_value.p_uuid    = &ble_uuid;
   \   000000C0   0xA801             ADD      R0,SP,#+4
   \   000000C2   0x9006             STR      R0,[SP, #+24]
    258              attr_char_value.p_attr_md = &attr_md;
   \   000000C4   0x4668             MOV      R0,SP
   \   000000C6   0x9007             STR      R0,[SP, #+28]
    259              attr_char_value.init_len  = BPENGENUICS_MAX_CHAR_LEN;
   \   000000C8   0x2014             MOVS     R0,#+20
   \   000000CA   0xA906             ADD      R1,SP,#+24
   \   000000CC   0x8108             STRH     R0,[R1, #+8]
    260              attr_char_value.max_len   = BPENGENUICS_MAX_CHAR_LEN;
   \   000000CE   0x2014             MOVS     R0,#+20
   \   000000D0   0xA906             ADD      R1,SP,#+24
   \   000000D2   0x8188             STRH     R0,[R1, #+12]
    261          
    262              return sd_ble_gatts_characteristic_add(BPEngenuics_u16ServiceHandle, &rxchar_metadata, &attr_char_value, &BPEngenuics_eRxHandles);
   \   000000D4   0x....             LDR      R3,??DataTable7_2
   \   000000D6   0xAA06             ADD      R2,SP,#+24
   \   000000D8   0xA90B             ADD      R1,SP,#+44
   \   000000DA   0x....             LDR      R0,??DataTable7_6
   \   000000DC   0x8800             LDRH     R0,[R0, #+0]
   \   000000DE   0xDFA2             SVC      0xA2
   \   000000E0   0xB013             ADD      SP,SP,#+76
   \   000000E2   0xBDF0             POP      {R4-R7,PC}       ;; return
    263          }
    264          
    265          /*--------------------------------------------------------------------------------------------------------------------
    266          Function: BPEngenuicsAddTxcharacteristic
    267          
    268          Description:
    269          Adds the Tx Characteristic to the BLE Service.
    270          
    271          Requires:
    272             - Called during module initialization.
    273             
    274          Promises:
    275            - Adds the BPEngenuics Tx Characteristic.
    276          */

   \                                 In section .text, align 2, keep-with-next
    277          static u32 BPEngenuicsAddTxCharacteristic(void)
    278          {
   \                     BPEngenuicsAddTxCharacteristic: (+1)
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
    279              ble_gatts_char_md_t txchar_metadata;
    280              ble_gatts_attr_md_t cccd_md;
    281              ble_gatts_attr_t    attr_char_value;
    282              ble_uuid_t          ble_uuid;
    283              ble_gatts_attr_md_t attr_md;
    284          
    285              // ClientConfigurationDescriptor Metadata.
    286              memset(&cccd_md, 0, sizeof(cccd_md));
   \   00000004   0x2003             MOVS     R0,#+3
   \   00000006   0x9008             STR      R0,[SP, #+32]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9007             STR      R0,[SP, #+28]
   \   0000000C   0xAC01             ADD      R4,SP,#+4
   \   0000000E   0x9A07             LDR      R2,[SP, #+28]
   \   00000010   0x9908             LDR      R1,[SP, #+32]
   \   00000012   0x0020             MOVS     R0,R4
   \   00000014   0x.... 0x....      BL       __aeabi_memset
   \   00000018   0x9403             STR      R4,[SP, #+12]
    287              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.read_perm);
   \   0000001A   0x4668             MOV      R0,SP
   \   0000001C   0x7900             LDRB     R0,[R0, #+4]
   \   0000001E   0x21F0             MOVS     R1,#+240
   \   00000020   0x4001             ANDS     R1,R1,R0
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x4308             ORRS     R0,R0,R1
   \   00000026   0x4669             MOV      R1,SP
   \   00000028   0x7108             STRB     R0,[R1, #+4]
   \   0000002A   0x4668             MOV      R0,SP
   \   0000002C   0x7900             LDRB     R0,[R0, #+4]
   \   0000002E   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000030   0x0F00             LSRS     R0,R0,#+28
   \   00000032   0x2110             MOVS     R1,#+16
   \   00000034   0x4301             ORRS     R1,R1,R0
   \   00000036   0x4668             MOV      R0,SP
   \   00000038   0x7101             STRB     R1,[R0, #+4]
    288              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&cccd_md.write_perm);
   \   0000003A   0xA801             ADD      R0,SP,#+4
   \   0000003C   0x7840             LDRB     R0,[R0, #+1]
   \   0000003E   0x21F0             MOVS     R1,#+240
   \   00000040   0x4001             ANDS     R1,R1,R0
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x4308             ORRS     R0,R0,R1
   \   00000046   0xA901             ADD      R1,SP,#+4
   \   00000048   0x7048             STRB     R0,[R1, #+1]
   \   0000004A   0xA801             ADD      R0,SP,#+4
   \   0000004C   0x7840             LDRB     R0,[R0, #+1]
   \   0000004E   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   00000050   0x0F00             LSRS     R0,R0,#+28
   \   00000052   0x2110             MOVS     R1,#+16
   \   00000054   0x4301             ORRS     R1,R1,R0
   \   00000056   0xA801             ADD      R0,SP,#+4
   \   00000058   0x7041             STRB     R1,[R0, #+1]
    289          
    290              // Location of CCCD characteristic is on user stack.
    291              cccd_md.vloc = BLE_GATTS_VLOC_STACK;
   \   0000005A   0xA801             ADD      R0,SP,#+4
   \   0000005C   0x7880             LDRB     R0,[R0, #+2]
   \   0000005E   0x21F9             MOVS     R1,#+249
   \   00000060   0x4001             ANDS     R1,R1,R0
   \   00000062   0x2002             MOVS     R0,#+2
   \   00000064   0x4308             ORRS     R0,R0,R1
   \   00000066   0xA901             ADD      R1,SP,#+4
   \   00000068   0x7088             STRB     R0,[R1, #+2]
    292          
    293              // Metadata for the Tx Characteristic.
    294              memset(&txchar_metadata, 0, sizeof(txchar_metadata));
   \   0000006A   0x201C             MOVS     R0,#+28
   \   0000006C   0x9006             STR      R0,[SP, #+24]
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x9005             STR      R0,[SP, #+20]
   \   00000072   0xAC0E             ADD      R4,SP,#+56
   \   00000074   0x9A05             LDR      R2,[SP, #+20]
   \   00000076   0x9906             LDR      R1,[SP, #+24]
   \   00000078   0x0020             MOVS     R0,R4
   \   0000007A   0x.... 0x....      BL       __aeabi_memset
   \   0000007E   0x9403             STR      R4,[SP, #+12]
    295              txchar_metadata.char_props.notify = 1;
   \   00000080   0xA80E             ADD      R0,SP,#+56
   \   00000082   0x7800             LDRB     R0,[R0, #+0]
   \   00000084   0x2110             MOVS     R1,#+16
   \   00000086   0x4301             ORRS     R1,R1,R0
   \   00000088   0xA80E             ADD      R0,SP,#+56
   \   0000008A   0x7001             STRB     R1,[R0, #+0]
    296              txchar_metadata.p_cccd_md = &cccd_md;
   \   0000008C   0xA801             ADD      R0,SP,#+4
   \   0000008E   0x9013             STR      R0,[SP, #+76]
    297          
    298              // Load the TX CHAR UUID.
    299              ble_uuid.type = BPEngenuics_u8UuidType;
   \   00000090   0x....             LDR      R0,??DataTable7_4
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0xA902             ADD      R1,SP,#+8
   \   00000096   0x7088             STRB     R0,[R1, #+2]
    300              ble_uuid.uuid = BPENGENUICS_TX_CHAR_UUID;
   \   00000098   0x2001             MOVS     R0,#+1
   \   0000009A   0x4669             MOV      R1,SP
   \   0000009C   0x8108             STRH     R0,[R1, #+8]
    301          
    302              // Metadata for the Tx Attribute.
    303              memset(&attr_md, 0, sizeof(attr_md));
   \   0000009E   0x2003             MOVS     R0,#+3
   \   000000A0   0x9004             STR      R0,[SP, #+16]
   \   000000A2   0x2400             MOVS     R4,#+0
   \   000000A4   0x466D             MOV      R5,SP
   \   000000A6   0x0022             MOVS     R2,R4
   \   000000A8   0x9904             LDR      R1,[SP, #+16]
   \   000000AA   0x0028             MOVS     R0,R5
   \   000000AC   0x.... 0x....      BL       __aeabi_memset
   \   000000B0   0x9503             STR      R5,[SP, #+12]
    304              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.read_perm);
   \   000000B2   0x4668             MOV      R0,SP
   \   000000B4   0x7800             LDRB     R0,[R0, #+0]
   \   000000B6   0x21F0             MOVS     R1,#+240
   \   000000B8   0x4001             ANDS     R1,R1,R0
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x4308             ORRS     R0,R0,R1
   \   000000BE   0x4669             MOV      R1,SP
   \   000000C0   0x7008             STRB     R0,[R1, #+0]
   \   000000C2   0x4668             MOV      R0,SP
   \   000000C4   0x7800             LDRB     R0,[R0, #+0]
   \   000000C6   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000000C8   0x0F00             LSRS     R0,R0,#+28
   \   000000CA   0x2110             MOVS     R1,#+16
   \   000000CC   0x4301             ORRS     R1,R1,R0
   \   000000CE   0x4668             MOV      R0,SP
   \   000000D0   0x7001             STRB     R1,[R0, #+0]
    305              BLE_GAP_CONN_SEC_MODE_SET_OPEN(&attr_md.write_perm);
   \   000000D2   0x4668             MOV      R0,SP
   \   000000D4   0x7840             LDRB     R0,[R0, #+1]
   \   000000D6   0x21F0             MOVS     R1,#+240
   \   000000D8   0x4001             ANDS     R1,R1,R0
   \   000000DA   0x2001             MOVS     R0,#+1
   \   000000DC   0x4308             ORRS     R0,R0,R1
   \   000000DE   0x4669             MOV      R1,SP
   \   000000E0   0x7048             STRB     R0,[R1, #+1]
   \   000000E2   0x4668             MOV      R0,SP
   \   000000E4   0x7840             LDRB     R0,[R0, #+1]
   \   000000E6   0x0700             LSLS     R0,R0,#+28       ;; ZeroExtS R0,R0,#+28,#+28
   \   000000E8   0x0F00             LSRS     R0,R0,#+28
   \   000000EA   0x2110             MOVS     R1,#+16
   \   000000EC   0x4301             ORRS     R1,R1,R0
   \   000000EE   0x4668             MOV      R0,SP
   \   000000F0   0x7041             STRB     R1,[R0, #+1]
    306              attr_md.vloc = BLE_GATTS_VLOC_STACK;
   \   000000F2   0x4668             MOV      R0,SP
   \   000000F4   0x7880             LDRB     R0,[R0, #+2]
   \   000000F6   0x21F9             MOVS     R1,#+249
   \   000000F8   0x4001             ANDS     R1,R1,R0
   \   000000FA   0x2002             MOVS     R0,#+2
   \   000000FC   0x4308             ORRS     R0,R0,R1
   \   000000FE   0x4669             MOV      R1,SP
   \   00000100   0x7088             STRB     R0,[R1, #+2]
    307              attr_md.vlen = 1;
   \   00000102   0x4668             MOV      R0,SP
   \   00000104   0x7880             LDRB     R0,[R0, #+2]
   \   00000106   0x2101             MOVS     R1,#+1
   \   00000108   0x4301             ORRS     R1,R1,R0
   \   0000010A   0x4668             MOV      R0,SP
   \   0000010C   0x7081             STRB     R1,[R0, #+2]
    308          
    309              // Setup of the Tx Attribute.
    310              memset(&attr_char_value, 0, sizeof(attr_char_value));
   \   0000010E   0x2514             MOVS     R5,#+20
   \   00000110   0x2600             MOVS     R6,#+0
   \   00000112   0xAF09             ADD      R7,SP,#+36
   \   00000114   0x0032             MOVS     R2,R6
   \   00000116   0x0029             MOVS     R1,R5
   \   00000118   0x0038             MOVS     R0,R7
   \   0000011A   0x.... 0x....      BL       __aeabi_memset
    311              attr_char_value.p_uuid    = &ble_uuid;
   \   0000011E   0xA802             ADD      R0,SP,#+8
   \   00000120   0x9009             STR      R0,[SP, #+36]
    312              attr_char_value.p_attr_md = &attr_md;
   \   00000122   0x4668             MOV      R0,SP
   \   00000124   0x900A             STR      R0,[SP, #+40]
    313              attr_char_value.init_len  = BPENGENUICS_MAX_CHAR_LEN;
   \   00000126   0x2014             MOVS     R0,#+20
   \   00000128   0xA909             ADD      R1,SP,#+36
   \   0000012A   0x8108             STRH     R0,[R1, #+8]
    314              attr_char_value.max_len   = BPENGENUICS_MAX_CHAR_LEN;
   \   0000012C   0x2014             MOVS     R0,#+20
   \   0000012E   0xA909             ADD      R1,SP,#+36
   \   00000130   0x8188             STRH     R0,[R1, #+12]
    315          
    316              return sd_ble_gatts_characteristic_add(BPEngenuics_u16ServiceHandle, &txchar_metadata, &attr_char_value, &BPEngenuics_eTxHandles);
   \   00000132   0x....             LDR      R3,??DataTable7_7
   \   00000134   0xAA09             ADD      R2,SP,#+36
   \   00000136   0xA90E             ADD      R1,SP,#+56
   \   00000138   0x....             LDR      R0,??DataTable7_6
   \   0000013A   0x8800             LDRH     R0,[R0, #+0]
   \   0000013C   0xDFA2             SVC      0xA2
   \   0000013E   0xB015             ADD      SP,SP,#+84
   \   00000140   0xBDF0             POP      {R4-R7,PC}       ;; return
    317          }
    318          
    319          
    320          /*----------------------------------------------------------------------------------------------------------------------
    321          Function: CallbackBleperipheralEngenuicsDataRx
    322          
    323          Description:
    324          Callback to handle the message received on the RX Characteristic of the bleperipheral_engenuics profile.
    325          
    326          Requires:
    327            - data: pointer to array containing data.
    328            - len: Length of array
    329          
    330          Promises:
    331            - Application handling of the message.
    332          */

   \                                 In section .text, align 2, keep-with-next
    333          static void CallbackBleperipheralEngenuicsDataRx(u8* u8Data_, u8 u8Length_)
    334          {
    335            // Forward handling to ANTTT module.
    336            //AntttHandleIncomingMessage(u8Data_, u8Length_);
    337          }
   \                     CallbackBleperipheralEngenuicsDataRx: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x0000FFFF         DC32     0xffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     BPEngenuics_bNotifcationEnabled

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     BPEngenuics_eTxHandles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7:
   \   00000000   0x........         DC32     BPEngenuics_u16ConnHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_1:
   \   00000000   0x........         DC32     G_u32BPEngenuicsFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_2:
   \   00000000   0x........         DC32     BPEngenuics_eRxHandles

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_3:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_4:
   \   00000000   0x........         DC32     BPEngenuics_u8UuidType

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_5:
   \   00000000   0x0000EEEE         DC32     0xeeee

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_6:
   \   00000000   0x........         DC32     BPEngenuics_u16ServiceHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable7_7:
   \   00000000   0x........         DC32     BPEngenuics_eTxHandles

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x9E 0xCA          DC8 158, 202, 220, 36, 14, 229, 169, 224, 147, 243, 163, 181, 0, 0, 64
   \              0xDC 0x24    
   \              0x0E 0xE5    
   \              0xA9 0xE0    
   \              0x93 0xF3    
   \              0xA3 0xB5    
   \              0x00 0x00    
   \              0x40         
   \   0000000F   0x6E               DC8 110
    338          
    339          /*--------------------------------------------------------------------------------------------------------------------*/
    340          /* End of File                                                                                                        */
    341          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      96   BPEngenuicsAddRxCharacteristic
        96   -> __aeabi_memset
      32   BPEngenuicsAddService
        32   -> __aeabi_memcpy4
     104   BPEngenuicsAddTxCharacteristic
       104   -> __aeabi_memset
       8   BPEngenuicsInitialize
         8   -> BPEngenuicsAddRxCharacteristic
         8   -> BPEngenuicsAddService
         8   -> BPEngenuicsAddTxCharacteristic
       0   BPEngenuicsOnConnect
       0   BPEngenuicsOnDisconnect
      16   BPEngenuicsOnWrite
        16   -> CallbackBleperipheralEngenuicsDataRx
        16   -> ble_srv_is_notification_enabled
      40   BPEngenuicsSendData
        40   -> __aeabi_memset
       0   CallbackBleperipheralEngenuicsDataRx
       8   ble_srv_is_notification_enabled
         8   -> uint16_decode
       0   uint16_decode


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable7
       4  ??DataTable7_1
       4  ??DataTable7_2
       4  ??DataTable7_3
       4  ??DataTable7_4
       4  ??DataTable7_5
       4  ??DataTable7_6
       4  ??DataTable7_7
      16  ?_0
     228  BPEngenuicsAddRxCharacteristic
      52  BPEngenuicsAddService
     322  BPEngenuicsAddTxCharacteristic
      50  BPEngenuicsInitialize
      20  BPEngenuicsOnConnect
      20  BPEngenuicsOnDisconnect
     100  BPEngenuicsOnWrite
     100  BPEngenuicsSendData
       1  BPEngenuics_bNotifcationEnabled
       8  BPEngenuics_eRxHandles
       8  BPEngenuics_eTxHandles
       2  BPEngenuics_u16ConnHandle
       2  BPEngenuics_u16ServiceHandle
       1  BPEngenuics_u8UuidType
       2  CallbackBleperipheralEngenuicsDataRx
       4  G_u32BPEngenuicsFlags
      20  ble_srv_is_notification_enabled
      12  uint16_decode

 
  26 bytes in section .bss
  16 bytes in section .rodata
 970 bytes in section .text
 
 970 bytes of CODE  memory
  16 bytes of CONST memory
  26 bytes of DATA  memory

Errors: none
Warnings: none
